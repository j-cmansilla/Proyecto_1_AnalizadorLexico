/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * interfaz.java
 *
 * Created on 16/11/2011, 07:44:27 AM
 */

package analizador;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.Reader;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Carlos
 */
public class interfaz extends javax.swing.JFrame {

    /** Creates new form interfaz */
    List<identificador> tokenslist;
    public interfaz() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        textArea1 = new java.awt.TextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Analizar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Errores:");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Token", "Tipo"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel3.setText("Analizador LÃ©xico");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(319, 319, 319)
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(textArea1, javax.swing.GroupLayout.DEFAULT_SIZE, 419, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 616, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(textArea1, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try{
             probarLexerFile();
        }
        catch (IOException ex){
            System.out.println(ex.getMessage());
        }
        tablaResultado();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new interfaz().setVisible(true);
            }
        });
    }
    public void probarLexerFile() throws IOException{
        tokenslist = new LinkedList<identificador>();
        Reader reader = new BufferedReader(new FileReader("C:/Users/Jose Mansilla/Desktop/test.txt"));
        Lexer lexer = new Lexer (reader);
        String resultado="";
        int errores = 0;
        while (true){
            Token token =lexer.yylex();
            identificador tokenitem=new identificador();
            if (token == null){
                for(int i=0;i<tokenslist.size();i++){
                    System.out.println(tokenslist.get(i).nombre + "=" + tokenslist.get(i).tipo);
                }
                resultado = resultado +"<<<<<<<<<<<<<ERRORES>>>>>>>>>>>>>>>"+System.getProperty("line.separator")+"TOTAL: "+errores+System.getProperty("line.separator");
                if (errores==0) {
                    resultado = resultado+"SI ES VALIDO EN PHP!";
                }else{
                    resultado = resultado+"NO ES VALIDO EN PHP!";
                }
                textArea1.setText(resultado);
                return;
            }
            switch (token){
                case COMMENT:
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="Comentario de 1 linea";
                    tokenslist.add(tokenitem);
                    break;
                case COMILLA:
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="Comilla";
                    tokenslist.add(tokenitem);
                    break;
                case COMMENTM:
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="Comentario de multi linea";
                    tokenslist.add(tokenitem);
                    break;
                case PALABRARESERVADA:
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="Palabra reservada";
                    tokenslist.add(tokenitem);
                    break;
                case OPERADORARITMETICO:
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="Operador Aritmetico";
                    tokenslist.add(tokenitem);
                    break;
                case SI:
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="Sentencia de control if";
                    tokenslist.add(tokenitem);
                break;
                case CADENA:
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="Cadena de texto";
                    tokenslist.add(tokenitem);
                    break;
                case ENT:
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="Entero";
                    tokenslist.add(tokenitem);
                    break;
                case REA:
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="Real";
                    tokenslist.add(tokenitem);
                    break;
                case TIPODEDATOL:
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="Tipo de dato logico";
                    tokenslist.add(tokenitem);
                    break;
                case ERROR:
                    errores++;
                    resultado=resultado+ "Error, simbolo "+lexer.lexeme+" no reconocido. "+"Linea: "+lexer.linea+System.getProperty("line.separator");
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="NO RECONOCIDO";
                    tokenslist.add(tokenitem);
                break;
                case PUNTOYCOMA:
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="Fin de linea";
                    tokenslist.add(tokenitem);
                    break;
                case OPERADORLOGICO:
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="Operador logico";
                    tokenslist.add(tokenitem);
                    break;
                case INICIOPHP:
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="Inicio php";
                    tokenslist.add(tokenitem);
                    break;
                case FINPHP:
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="Fin php";
                    tokenslist.add(tokenitem);
                break;
                case LLAVEA:
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="Llave inicial";
                    tokenslist.add(tokenitem);
                break;
                case LLAVEC:
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="Llave final";
                    tokenslist.add(tokenitem);
                break;
                case ASIGNACION:
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="Asignacion";
                    tokenslist.add(tokenitem);
                break;
                case COMPARACION:
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="Comparacion";
                    tokenslist.add(tokenitem);
                break;
                case DIFERENTE:
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="Diferente";
                    tokenslist.add(tokenitem);
                break;
                case TEXTO:
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="Texto";
                    tokenslist.add(tokenitem);
                break;
                case VARIABLE:
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="Declaracion de variable";
                    tokenslist.add(tokenitem);
                break;
                case ID: {
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="ID";
                    tokenslist.add(tokenitem);
                    break;
                }
                case INT:
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="INT";
                    tokenslist.add(tokenitem);
                    break;
                case PAA:
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="Parentesis inicial";
                    tokenslist.add(tokenitem);
                break;
                case PAC:
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="Parentesis final";
                    tokenslist.add(tokenitem);
                break;
                default:
                    
            }
    }
 }
    public void tablaResultado(){
        Object[][] matriz = new Object [tokenslist.size()][2];
        for(int i =0; i<tokenslist.size();i++){
            matriz[i][0] = tokenslist.get(i).nombre;
            matriz[i][1] = tokenslist.get(i).tipo;
        }
        jTable1.setModel(new javax.swing.table.DefaultTableModel(matriz,
            new String [] {
                "Nombre", "Tipo"
        }
        ));
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private java.awt.TextArea textArea1;
    // End of variables declaration//GEN-END:variables

}
