/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * interfaz.java
 *
 * Created on 16/11/2011, 07:44:27 AM
 */

package analizador;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.Writer;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Carlos
 */
public class interfaz extends javax.swing.JFrame {

    /** Creates new form interfaz */
    List<TokenEvaluado> tokenslist;
    public interfaz() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuBar1 = new java.awt.MenuBar();
        menu1 = new java.awt.Menu();
        menu2 = new java.awt.Menu();
        jMenu1 = new javax.swing.JMenu();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        textArea1 = new java.awt.TextArea();
        menuArchivo = new javax.swing.JMenuBar();
        menuSubir = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();

        menu1.setLabel("File");
        menuBar1.add(menu1);

        menu2.setLabel("Edit");
        menuBar1.add(menu2);

        jMenu1.setText("jMenu1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Analizar");
        jButton1.setEnabled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Errores:");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Token", "Tipo"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel3.setText("Analizador LÃ©xico");

        menuSubir.setText("Subir Archivo");
        menuSubir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                menuSubirMousePressed(evt);
            }
        });

        jMenu4.setText("Subir Archivo");
        jMenu4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu4MouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenu4MousePressed(evt);
            }
        });
        menuSubir.add(jMenu4);

        menuArchivo.add(menuSubir);
        menuArchivo.add(jMenu3);

        setJMenuBar(menuArchivo);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(319, 319, 319)
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(textArea1, javax.swing.GroupLayout.DEFAULT_SIZE, 419, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 616, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(textArea1, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try{
             probarLexerFile();
        }
        catch (IOException ex){
            System.out.println(ex.getMessage());
        }
        
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed
    public String filePath;
    private void jMenu4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu4MouseClicked
        // TODO add your handling code here:
       
    }//GEN-LAST:event_jMenu4MouseClicked

    private void menuSubirMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuSubirMousePressed
        // TODO add your handling code here:
        /*JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        File f = chooser.getSelectedFile();
        if (f != null) {     
            filePath = f.getAbsolutePath();
            jButton1.setEnabled(true);
        }*/
    }//GEN-LAST:event_menuSubirMousePressed

    private void jMenu4MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu4MousePressed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        File f = chooser.getSelectedFile();
        if (f != null) {     
            filePath = f.getAbsolutePath();
            jButton1.setEnabled(true);
        }
    }//GEN-LAST:event_jMenu4MousePressed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) throws IOException {
        File output = new File(DEFAULT_OUTPUT_FILE);
        File directorio = new File("C:\\MINIPHP");
        directorio.mkdir();
        output.createNewFile();
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new interfaz().setVisible(true);
            }
        });
    }
    
    private ArrayList listaErrores;
    private static final String DEFAULT_OUTPUT_FILE = "Output.out";
    
    public void IniciarProcesoDeSalida(){
        Writer writer = null;
    	String output ="";
    	for (int i = 0; i < listaErrores.size(); i++) {
			output = output + listaErrores.get(i).toString()+System.lineSeparator();
		}
    	try {
            writer = new BufferedWriter(new OutputStreamWriter(
                    new FileOutputStream("C:\\MINIPHP\\"+DEFAULT_OUTPUT_FILE), "utf-8"));
            writer.write(output);
        } catch (IOException ex) {
            // report
        } finally {
            try {writer.close();} catch (IOException ex) {/*ignore*/}
        }
        JOptionPane.showMessageDialog(null, "Archivo de salida generado, dirigase a:    "+System.getProperty("line.separator")+"         C:\\MINIPHP\\"+DEFAULT_OUTPUT_FILE+System.getProperty("line.separator")+"     para ver sus resultados!");
    }
    
    public void probarLexerFile() throws IOException{
        listaErrores = new ArrayList();
        tokenslist = new LinkedList<TokenEvaluado>();
        Reader reader = new BufferedReader(new FileReader(filePath));
        Lexer lexer = new Lexer (reader);
        String resultado="";
        int errores = 0;
        while (true){
            Token token =lexer.yylex();
            TokenEvaluado tokenitem=new TokenEvaluado();
            if (token == null){
                for(int i=0;i<tokenslist.size();i++){
                    System.out.println(tokenslist.get(i).nombre + "=" + tokenslist.get(i).tipo);
                }
                resultado = resultado +"<<<<<<<<<<<<<ERRORES>>>>>>>>>>>>>>>"+System.getProperty("line.separator")+"TOTAL: "+errores+System.getProperty("line.separator");
                listaErrores.add("<<<<<<<<<<<<<ERRORES>>>>>>>>>>>>>>>");
                listaErrores.add("TOTAL: "+errores);
                if (errores==0) {
                    resultado = resultado+"SI ES VALIDO EN PHP!";
                    listaErrores.add("SI ES VALIDO EN PHP!");
                    String ejemplo = "HOLA MUNDO";
                    if (ejemplo.contains("HOLA")) {
                       String nuevac = ejemplo.replaceAll("HOLA", "hola");
                       System.out.println(nuevac);
                    }
                }else{
                    resultado = resultado+"NO ES VALIDO EN PHP!";
                    listaErrores.add("NO ES VALIDO EN PHP!");
                }
                textArea1.setText(resultado);
                tablaResultado();
                IniciarProcesoDeSalida();
                return;
            }
            switch (token){
                case FUN:
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="FunciÃ³n definida por el usuario";
                    tokenslist.add(tokenitem);
                break;
                case ACCDB:
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="Acceso a la base de datos";
                    tokenslist.add(tokenitem);
                break;
                case VARPRE:
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="Variable predefinida";
                    tokenslist.add(tokenitem);
                break;
                case SELEC:
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="Sentencia de control switch";
                    tokenslist.add(tokenitem);
                break;
                case INCLUI:
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="Sentencia de control include";
                    tokenslist.add(tokenitem);
                break;
                case CONTIN:
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="Sentencia de control continue";
                    tokenslist.add(tokenitem);
                break;
                case RET:
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="Sentencia de control return";
                    tokenslist.add(tokenitem);
                break;
                case BREA:
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="Sentencia de control break";
                    tokenslist.add(tokenitem);
                break;
                case COMMENT:
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="Comentario de 1 linea";
                    tokenslist.add(tokenitem);
                    break;
                case ELS:
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="Sentencia de control else";
                    tokenslist.add(tokenitem);
                    break;
                case MIENTR:
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="Sentencia de control while";
                    tokenslist.add(tokenitem);
                    break;
                case HMIENTR:
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="Sentencia de control do-while";
                    tokenslist.add(tokenitem);
                    break;
                case PARA:
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="Sentencia de control for";
                    tokenslist.add(tokenitem);
                    break;
                case PARAC:
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="Sentencia de control foreach";
                    tokenslist.add(tokenitem);
                    break;
                case COMILLA:
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="Comilla";
                    tokenslist.add(tokenitem);
                    break;
                case COMMENTM:
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="Comentario de multi linea";
                    tokenslist.add(tokenitem);
                    break;
                case PALABRARESERVADA:
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="Palabra reservada";
                    tokenslist.add(tokenitem);
                    break;
                case OPERADORARITMETICO:
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="Operador AritmÃ©tico";
                    tokenslist.add(tokenitem);
                    break;
                case SI:
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="Sentencia de control if";
                    tokenslist.add(tokenitem);
                break;
                case CADENA:
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="Cadena de texto";
                    tokenslist.add(tokenitem);
                    break;
                case ENT:
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="Tipo de dato entero";
                    tokenslist.add(tokenitem);
                    break;
                case REA:
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="Tipo de dato real";
                    tokenslist.add(tokenitem);
                    break;
                case TIPODEDATOL:
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="Tipo de dato lÃ³gico";
                    tokenslist.add(tokenitem);
                    break;
                case ERROR:
                    errores++;
                    listaErrores.add("Error, sÃ­mbolo "+lexer.lexeme+" no reconocido. "+"LÃ­nea: "+lexer.linea);
                    resultado=resultado+ "Error, sÃ­mbolo "+lexer.lexeme+" no reconocido. "+"LÃ­nea: "+lexer.linea+System.getProperty("line.separator");
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="NO RECONOCIDO";
                    tokenslist.add(tokenitem);
                break;
                case PUNTOYCOMA:
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="Fin de lÃ­nea";
                    tokenslist.add(tokenitem);
                    break;
                case OPERADORLOGICO:
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="Operador lÃ³gico";
                    tokenslist.add(tokenitem);
                    break;
                case INICIOPHP:
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="Inicio php";
                    tokenslist.add(tokenitem);
                    break;
                case FINPHP:
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="Fin php";
                    tokenslist.add(tokenitem);
                break;
                case LLAVEA:
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="Llave inicial";
                    tokenslist.add(tokenitem);
                break;
                case LLAVEC:
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="Llave final";
                    tokenslist.add(tokenitem);
                break;
                case ASIGNACION:
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="Operador de asignaciÃ³n";
                    tokenslist.add(tokenitem);
                break;
                case COMPARACION:
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="Operador de comparaciÃ³n";
                    tokenslist.add(tokenitem);
                break;
                case DIFERENTE:
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="Operador de diferencia";
                    tokenslist.add(tokenitem);
                break;
                case TEXTO:
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="Texto";
                    tokenslist.add(tokenitem);
                break;
                case VARIABLE:
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="Declaracion de variable";
                    tokenslist.add(tokenitem);
                break;
                case ID: {
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="Identificador";
                    tokenslist.add(tokenitem);
                    break;
                }
                case INT:
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="Entero";
                    tokenslist.add(tokenitem);
                    break;
                case PAA:
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="ParÃ©ntesis inicial";
                    tokenslist.add(tokenitem);
                break;
                case PAC:
                    tokenitem.nombre=lexer.lexeme;
                    tokenitem.tipo="ParÃ©ntesis final";
                    tokenslist.add(tokenitem);
                break;
                default:
                    
            }
    }
 }
    public void tablaResultado(){
        Object[][] matriz = new Object [tokenslist.size()][2];
        for(int i =0; i<tokenslist.size();i++){
            matriz[i][0] = tokenslist.get(i).nombre;
            matriz[i][1] = tokenslist.get(i).tipo;
        }
        jTable1.setModel(new javax.swing.table.DefaultTableModel(matriz,
            new String [] {
                "Nombre", "Tipo"
        }
        ));
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private java.awt.Menu menu1;
    private java.awt.Menu menu2;
    private javax.swing.JMenuBar menuArchivo;
    private java.awt.MenuBar menuBar1;
    private javax.swing.JMenu menuSubir;
    private java.awt.TextArea textArea1;
    // End of variables declaration//GEN-END:variables

}
