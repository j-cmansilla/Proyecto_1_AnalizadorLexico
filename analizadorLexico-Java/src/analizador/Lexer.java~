/* The following code was generated by JFlex 1.4.3 on 4/5/18 9:30 PM */

package analizador;
import static analizador.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/5/18 9:30 PM from the specification file
 * <tt>C:/Users/Jose Mansilla/Documents/2018/Universidad/Primer ciclo/Lenguajes formales y automatas/Proyecto_1_AnalizadorLexico/analizadorLexico-Java/src/analizador/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\72\1\2\2\0\1\1\22\0\1\61\1\46\1\52\1\5"+
    "\1\36\1\45\1\47\1\56\1\57\1\60\1\4\1\43\1\53\1\44"+
    "\1\51\1\3\12\74\1\70\1\71\1\64\1\67\1\65\1\66\1\55"+
    "\1\7\1\11\1\6\1\22\1\12\1\23\1\32\1\20\1\24\1\73"+
    "\1\37\1\10\1\30\1\13\1\21\1\31\1\35\1\17\1\15\1\16"+
    "\1\14\1\25\1\34\1\26\1\27\1\73\1\40\1\75\1\42\1\45"+
    "\1\33\1\41\1\7\1\11\1\6\1\22\1\12\1\23\1\32\1\20"+
    "\1\24\1\73\1\37\1\10\1\30\1\13\1\21\1\31\1\35\1\17"+
    "\1\15\1\16\1\14\1\25\1\34\1\26\1\27\1\73\1\62\1\50"+
    "\1\63\1\54\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\4\26\5\1\6\1\7"+
    "\1\10\1\11\3\3\3\12\1\13\1\10\1\14\1\15"+
    "\1\10\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\4\1\0\1\25"+
    "\1\0\1\4\5\5\1\32\23\5\1\12\1\5\1\33"+
    "\6\5\1\34\11\5\6\0\1\35\2\0\1\36\1\12"+
    "\1\0\1\37\3\0\1\37\3\0\1\40\1\41\1\42"+
    "\2\4\2\0\36\5\1\43\3\5\1\44\16\5\20\0"+
    "\1\4\7\5\1\45\1\46\6\5\1\47\32\5\14\0"+
    "\1\50\1\30\1\0\1\5\1\51\2\5\1\52\15\5"+
    "\1\53\2\5\1\32\16\5\1\54\1\55\11\0\1\56"+
    "\5\5\1\57\1\60\1\61\17\5\11\0\1\5\1\45"+
    "\1\5\1\32\1\5\1\62\1\63\5\5\1\64\2\5"+
    "\6\0\1\65\1\5\1\66\4\5\5\0\3\5\4\0"+
    "\1\67\25\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[396];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\76\0\174\0\272\0\370\0\u0136\0\u0174"+
    "\0\u01b2\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u0326\0\u0364"+
    "\0\u03a2\0\u03e0\0\u041e\0\u045c\0\u049a\0\u04d8\0\u0516\0\u0554"+
    "\0\u0592\0\u05d0\0\u060e\0\u064c\0\u068a\0\u06c8\0\76\0\76"+
    "\0\u0706\0\u0744\0\76\0\u0782\0\u07c0\0\u07fe\0\u083c\0\u087a"+
    "\0\76\0\76\0\u08b8\0\u08f6\0\76\0\76\0\76\0\u0934"+
    "\0\76\0\u0972\0\u09b0\0\76\0\76\0\u09ee\0\76\0\u0a2c"+
    "\0\u0a6a\0\76\0\u0aa8\0\u0ae6\0\u0b24\0\u0b62\0\u0ba0\0\u0bde"+
    "\0\u0c1c\0\u03a2\0\u0c5a\0\u0c98\0\u0cd6\0\u0d14\0\u0d52\0\u0d90"+
    "\0\u0dce\0\u0e0c\0\u0e4a\0\u0e88\0\u0ec6\0\u0f04\0\u0f42\0\u0f80"+
    "\0\u0fbe\0\u0ffc\0\u103a\0\u1078\0\u10b6\0\u03a2\0\u10f4\0\u1132"+
    "\0\u1170\0\u11ae\0\u11ec\0\u122a\0\u1268\0\u12a6\0\u03a2\0\u12e4"+
    "\0\u1322\0\u1360\0\u139e\0\u13dc\0\u141a\0\u1458\0\u1496\0\u14d4"+
    "\0\u1512\0\u1550\0\u158e\0\u15cc\0\u160a\0\u1648\0\u1686\0\u16c4"+
    "\0\u1702\0\76\0\76\0\u087a\0\u1740\0\u177e\0\u08b8\0\u17bc"+
    "\0\u08b8\0\u17fa\0\u1838\0\u1876\0\76\0\76\0\u18b4\0\u18f2"+
    "\0\76\0\u1930\0\u196e\0\u19ac\0\u19ea\0\u1a28\0\u1a66\0\u1aa4"+
    "\0\u1ae2\0\u1b20\0\u1b5e\0\u1b9c\0\u1bda\0\u1c18\0\u1c56\0\u1c94"+
    "\0\u1cd2\0\u1d10\0\u1d4e\0\u1d8c\0\u1dca\0\u1e08\0\u1e46\0\u1e84"+
    "\0\u1ec2\0\u1f00\0\u1f3e\0\u1f7c\0\u1fba\0\u1ff8\0\u2036\0\u2074"+
    "\0\u20b2\0\u20f0\0\u212e\0\u216c\0\u21aa\0\u21e8\0\u2226\0\u2264"+
    "\0\u22a2\0\u22e0\0\u231e\0\u235c\0\u239a\0\u23d8\0\u2416\0\u2454"+
    "\0\u2492\0\u24d0\0\u250e\0\u254c\0\u258a\0\u25c8\0\u2606\0\u2644"+
    "\0\u2682\0\u26c0\0\u26fe\0\u273c\0\u277a\0\u27b8\0\u27f6\0\u2834"+
    "\0\u2872\0\u28b0\0\u28ee\0\u292c\0\u1930\0\u296a\0\u29a8\0\u29e6"+
    "\0\u2a24\0\u2a62\0\u2aa0\0\u2ade\0\u2b1c\0\u03a2\0\u2b5a\0\u2b98"+
    "\0\u2bd6\0\u2c14\0\u2c52\0\u2c90\0\u03a2\0\u2cce\0\u2d0c\0\u2d4a"+
    "\0\u2d88\0\u2dc6\0\u2e04\0\u2e42\0\u2e80\0\u2ebe\0\u2efc\0\u2f3a"+
    "\0\u2f78\0\u2fb6\0\u2ff4\0\u3032\0\u3070\0\u30ae\0\u30ec\0\u312a"+
    "\0\u3168\0\u31a6\0\u31e4\0\u3222\0\u3260\0\u329e\0\u32dc\0\u331a"+
    "\0\u3358\0\u3396\0\u33d4\0\u3412\0\u3450\0\u348e\0\u34cc\0\u350a"+
    "\0\u3548\0\u3586\0\u35c4\0\76\0\76\0\u3602\0\u3640\0\u03a2"+
    "\0\u367e\0\u36bc\0\u03a2\0\u36fa\0\u3738\0\u3776\0\u37b4\0\u37f2"+
    "\0\u3830\0\u386e\0\u38ac\0\u38ea\0\u3928\0\u3966\0\u39a4\0\u39e2"+
    "\0\u03a2\0\u3a20\0\u3a5e\0\u3a9c\0\u3ada\0\u3b18\0\u3b56\0\u3b94"+
    "\0\u3bd2\0\u3c10\0\u3c4e\0\u3c8c\0\u3cca\0\u3d08\0\u3d46\0\u3d84"+
    "\0\u3dc2\0\u3e00\0\u03a2\0\76\0\u3e3e\0\u3e7c\0\u3eba\0\u3ef8"+
    "\0\u3f36\0\u3f74\0\u3fb2\0\u3ff0\0\u402e\0\76\0\u406c\0\u40aa"+
    "\0\u40e8\0\u4126\0\u4164\0\u03a2\0\u03a2\0\u03a2\0\u41a2\0\u41e0"+
    "\0\u421e\0\u425c\0\u429a\0\u42d8\0\u4316\0\u4354\0\u4392\0\u43d0"+
    "\0\u440e\0\u444c\0\u448a\0\u44c8\0\u4506\0\u4544\0\u4582\0\u45c0"+
    "\0\u45fe\0\u463c\0\u467a\0\u46b8\0\u46f6\0\u4734\0\u4772\0\u03a2"+
    "\0\u47b0\0\u47ee\0\u482c\0\u03a2\0\u47ee\0\u486a\0\u48a8\0\u48e6"+
    "\0\u4924\0\u4962\0\u03a2\0\u49a0\0\u49de\0\u4a1c\0\u4a5a\0\u4a98"+
    "\0\u4ad6\0\u4b14\0\u4b52\0\u03a2\0\u4b90\0\u03a2\0\u4bce\0\u4c0c"+
    "\0\u4c4a\0\u4c88\0\u4cc6\0\u4d04\0\u4d42\0\u4d80\0\u4dbe\0\u4dfc"+
    "\0\u4e3a\0\u4e78\0\u4eb6\0\u4ef4\0\u4f32\0\u4f70\0\76\0\u4fae"+
    "\0\u4fec\0\u502a\0\u5068\0\u50a6\0\u50e4\0\u5122\0\u5160\0\u519e"+
    "\0\u51dc\0\u521a\0\u5258\0\u5296\0\u52d4\0\u5312\0\u5350\0\u538e"+
    "\0\u53cc\0\u540a\0\u5448\0\u5486";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[396];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\21"+
    "\1\31\1\32\1\33\1\34\1\21\1\35\1\21\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\2\1\52\1\53\1\54\1\55"+
    "\1\3\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\3\1\21\1\66\1\67\101\0\1\70\1\71"+
    "\62\0\1\72\12\0\1\43\74\0\36\6\1\0\10\6"+
    "\1\73\6\6\1\74\1\0\7\6\1\0\2\6\7\0"+
    "\1\21\1\75\1\76\10\21\1\77\14\21\1\0\1\21"+
    "\33\0\2\21\7\0\3\21\1\100\1\21\1\101\1\21"+
    "\1\102\20\21\1\0\1\21\33\0\2\21\7\0\16\21"+
    "\1\103\11\21\1\0\1\21\33\0\2\21\7\0\11\21"+
    "\1\104\1\21\1\105\14\21\1\0\1\21\33\0\2\21"+
    "\7\0\1\106\1\21\1\107\2\21\1\110\11\21\1\111"+
    "\1\112\7\21\1\0\1\21\33\0\2\21\7\0\1\21"+
    "\1\113\2\21\1\114\1\21\1\115\4\21\1\116\14\21"+
    "\1\0\1\21\33\0\2\21\7\0\5\21\1\117\1\21"+
    "\1\120\20\21\1\0\1\21\33\0\2\21\7\0\10\21"+
    "\1\121\15\21\1\122\1\21\1\0\1\21\33\0\2\21"+
    "\7\0\11\21\1\123\1\124\15\21\1\0\1\21\33\0"+
    "\2\21\7\0\4\21\1\125\23\21\1\0\1\21\33\0"+
    "\2\21\7\0\30\21\1\0\1\21\33\0\2\21\7\0"+
    "\11\21\1\126\16\21\1\0\1\21\33\0\2\21\7\0"+
    "\4\21\1\127\6\21\1\130\2\21\1\120\11\21\1\0"+
    "\1\21\33\0\2\21\7\0\1\21\1\131\1\132\3\21"+
    "\1\133\4\21\1\134\2\21\1\135\11\21\1\0\1\21"+
    "\33\0\2\21\7\0\5\21\1\136\1\21\1\117\5\21"+
    "\1\137\4\21\1\140\5\21\1\0\1\21\33\0\2\21"+
    "\7\0\1\21\1\141\26\21\1\0\1\21\33\0\2\21"+
    "\7\0\13\21\1\22\14\21\1\0\1\21\33\0\2\21"+
    "\7\0\16\21\1\142\11\21\1\0\1\21\33\0\2\21"+
    "\7\0\6\21\1\143\2\21\1\144\16\21\1\0\1\21"+
    "\33\0\2\21\7\0\2\21\1\145\10\21\1\146\14\21"+
    "\1\0\1\21\33\0\2\21\7\0\25\21\1\147\2\21"+
    "\1\0\1\21\33\0\2\21\7\0\12\21\1\150\15\21"+
    "\1\0\1\21\33\0\2\21\10\0\1\151\7\0\1\152"+
    "\1\153\10\0\1\154\1\155\1\156\40\0\1\157\42\0"+
    "\1\160\77\0\1\43\76\0\1\43\27\0\1\161\70\0"+
    "\1\162\55\0\1\163\17\0\1\72\56\0\1\163\114\0"+
    "\1\72\11\0\36\164\1\0\10\164\1\165\6\164\1\166"+
    "\1\0\7\164\1\0\2\164\4\0\36\167\1\0\10\167"+
    "\1\170\3\167\1\171\2\167\1\172\1\0\7\167\1\0"+
    "\2\167\45\0\1\173\117\0\1\174\74\0\1\175\75\0"+
    "\1\72\1\0\1\176\14\0\30\157\1\0\1\157\11\0"+
    "\1\177\21\0\1\157\1\66\1\0\1\70\1\200\1\201"+
    "\73\70\4\202\1\203\71\202\52\0\1\6\26\0\36\6"+
    "\1\0\10\6\1\73\6\6\1\74\10\6\1\0\2\6"+
    "\7\0\2\21\1\204\4\21\1\120\1\205\17\21\1\0"+
    "\1\21\33\0\2\21\7\0\1\21\1\206\11\21\1\207"+
    "\14\21\1\0\1\21\33\0\2\21\7\0\5\21\1\210"+
    "\22\21\1\0\1\21\33\0\2\21\7\0\7\21\1\211"+
    "\20\21\1\0\1\21\33\0\2\21\7\0\14\21\1\126"+
    "\13\21\1\0\1\21\33\0\2\21\7\0\7\21\1\212"+
    "\20\21\1\0\1\21\33\0\2\21\7\0\4\21\1\213"+
    "\23\21\1\0\1\21\33\0\2\21\7\0\13\21\1\214"+
    "\14\21\1\0\1\21\33\0\2\21\7\0\12\21\1\215"+
    "\15\21\1\0\1\21\33\0\2\21\7\0\7\21\1\216"+
    "\20\21\1\0\1\21\33\0\2\21\7\0\14\21\1\217"+
    "\13\21\1\0\1\21\33\0\2\21\7\0\1\21\1\220"+
    "\26\21\1\0\1\21\33\0\2\21\7\0\10\21\1\221"+
    "\5\21\1\212\11\21\1\0\1\21\33\0\2\21\7\0"+
    "\22\21\1\222\5\21\1\0\1\21\33\0\2\21\7\0"+
    "\26\21\1\102\1\21\1\0\1\21\33\0\2\21\7\0"+
    "\2\21\1\220\25\21\1\0\1\21\33\0\2\21\7\0"+
    "\10\21\1\126\17\21\1\0\1\21\33\0\2\21\7\0"+
    "\7\21\1\223\20\21\1\0\1\21\33\0\2\21\7\0"+
    "\4\21\1\102\23\21\1\0\1\21\33\0\2\21\7\0"+
    "\1\21\1\224\7\21\1\225\16\21\1\0\1\21\33\0"+
    "\2\21\7\0\16\21\1\226\11\21\1\0\1\21\33\0"+
    "\2\21\7\0\1\21\1\227\4\21\1\230\12\21\1\102"+
    "\6\21\1\0\1\21\33\0\2\21\7\0\11\21\1\231"+
    "\16\21\1\0\1\21\33\0\2\21\7\0\10\21\1\232"+
    "\16\21\1\233\1\0\1\21\33\0\2\21\7\0\1\234"+
    "\14\21\1\235\12\21\1\0\1\21\33\0\2\21\7\0"+
    "\6\21\1\236\21\21\1\0\1\21\33\0\2\21\7\0"+
    "\2\21\1\237\25\21\1\0\1\21\33\0\2\21\7\0"+
    "\13\21\1\240\14\21\1\0\1\21\33\0\2\21\7\0"+
    "\5\21\1\241\22\21\1\0\1\21\33\0\2\21\7\0"+
    "\11\21\1\242\16\21\1\0\1\21\33\0\2\21\7\0"+
    "\5\21\1\243\22\21\1\0\1\21\33\0\2\21\7\0"+
    "\1\244\6\21\1\245\1\246\17\21\1\0\1\21\33\0"+
    "\2\21\7\0\23\21\1\247\4\21\1\0\1\21\33\0"+
    "\2\21\7\0\11\21\1\102\16\21\1\0\1\21\33\0"+
    "\2\21\7\0\4\21\1\250\23\21\1\0\1\21\33\0"+
    "\2\21\7\0\3\21\1\251\24\21\1\0\1\21\33\0"+
    "\2\21\7\0\13\21\1\252\2\21\1\253\11\21\1\0"+
    "\1\21\33\0\2\21\7\0\13\21\1\254\14\21\1\0"+
    "\1\21\33\0\2\21\7\0\10\21\1\215\17\21\1\0"+
    "\1\21\33\0\2\21\7\0\1\255\1\21\1\256\2\21"+
    "\1\257\2\21\1\260\3\21\1\261\1\262\4\21\1\263"+
    "\5\21\1\0\1\21\33\0\2\21\7\0\16\21\1\264"+
    "\11\21\1\0\1\21\33\0\2\21\20\0\1\265\70\0"+
    "\1\266\101\0\1\267\77\0\1\270\65\0\1\271\73\0"+
    "\1\272\3\0\1\273\2\0\1\274\1\0\1\275\3\0"+
    "\1\276\5\0\1\277\1\300\51\0\30\157\1\0\1\157"+
    "\33\0\2\157\7\0\30\160\1\0\1\160\1\0\1\301"+
    "\17\0\1\160\11\0\2\160\52\0\1\177\22\0\1\161"+
    "\53\0\1\164\26\0\36\164\1\0\10\164\1\165\6\164"+
    "\1\166\10\164\1\0\2\164\53\0\1\167\26\0\36\167"+
    "\1\0\10\167\1\170\3\167\1\171\2\167\1\172\10\167"+
    "\1\0\2\167\75\0\1\302\32\0\1\303\140\0\1\177"+
    "\3\0\1\201\73\0\4\202\1\304\74\202\1\305\1\304"+
    "\71\202\6\0\2\21\1\306\25\21\1\0\1\21\33\0"+
    "\2\21\7\0\1\307\27\21\1\0\1\21\33\0\2\21"+
    "\7\0\7\21\1\310\20\21\1\0\1\21\33\0\2\21"+
    "\7\0\5\21\1\120\22\21\1\0\1\21\33\0\2\21"+
    "\7\0\7\21\1\311\1\312\17\21\1\0\1\21\33\0"+
    "\2\21\7\0\10\21\1\313\17\21\1\0\1\21\33\0"+
    "\2\21\7\0\10\21\1\102\17\21\1\0\1\21\33\0"+
    "\2\21\7\0\1\21\1\314\26\21\1\0\1\21\33\0"+
    "\2\21\7\0\2\21\1\315\25\21\1\0\1\21\33\0"+
    "\2\21\7\0\13\21\1\102\14\21\1\0\1\21\33\0"+
    "\2\21\7\0\4\21\1\316\23\21\1\0\1\21\33\0"+
    "\2\21\7\0\14\21\1\317\13\21\1\0\1\21\33\0"+
    "\2\21\7\0\2\21\1\102\25\21\1\0\1\21\33\0"+
    "\2\21\7\0\4\21\1\320\23\21\1\0\1\21\33\0"+
    "\2\21\7\0\4\21\1\321\23\21\1\0\1\21\33\0"+
    "\2\21\7\0\4\21\1\212\23\21\1\0\1\21\33\0"+
    "\2\21\7\0\10\21\1\322\17\21\1\0\1\21\33\0"+
    "\2\21\7\0\16\21\1\323\11\21\1\0\1\21\33\0"+
    "\2\21\7\0\10\21\1\324\17\21\1\0\1\21\33\0"+
    "\2\21\7\0\16\21\1\212\11\21\1\0\1\21\33\0"+
    "\2\21\7\0\4\21\1\325\23\21\1\0\1\21\33\0"+
    "\2\21\7\0\13\21\1\114\14\21\1\0\1\21\33\0"+
    "\2\21\7\0\6\21\1\326\21\21\1\0\1\21\33\0"+
    "\2\21\7\0\6\21\1\327\21\21\1\0\1\21\33\0"+
    "\2\21\7\0\2\21\1\330\25\21\1\0\1\21\33\0"+
    "\2\21\7\0\1\21\1\331\14\21\1\332\11\21\1\0"+
    "\1\21\33\0\2\21\7\0\3\21\1\333\24\21\1\0"+
    "\1\21\33\0\2\21\7\0\7\21\1\230\20\21\1\0"+
    "\1\21\33\0\2\21\7\0\1\21\1\334\26\21\1\0"+
    "\1\21\33\0\2\21\7\0\1\335\27\21\1\0\1\21"+
    "\33\0\2\21\7\0\4\21\1\336\23\21\1\0\1\21"+
    "\33\0\2\21\7\0\1\21\1\337\26\21\1\0\1\21"+
    "\33\0\2\21\7\0\2\21\1\340\25\21\1\0\1\21"+
    "\33\0\2\21\7\0\10\21\1\341\17\21\1\0\1\21"+
    "\33\0\2\21\7\0\4\21\1\342\23\21\1\0\1\21"+
    "\33\0\2\21\7\0\2\21\1\343\25\21\1\0\1\21"+
    "\33\0\2\21\7\0\2\21\1\344\25\21\1\0\1\21"+
    "\33\0\2\21\7\0\2\21\1\322\25\21\1\0\1\21"+
    "\33\0\2\21\7\0\10\21\1\345\17\21\1\0\1\21"+
    "\33\0\2\21\7\0\5\21\1\212\11\21\1\346\10\21"+
    "\1\0\1\21\33\0\2\21\7\0\3\21\1\111\24\21"+
    "\1\0\1\21\33\0\2\21\7\0\2\21\1\347\25\21"+
    "\1\0\1\21\33\0\2\21\7\0\16\21\1\350\11\21"+
    "\1\0\1\21\33\0\2\21\7\0\1\21\1\351\26\21"+
    "\1\0\1\21\33\0\2\21\7\0\11\21\1\352\16\21"+
    "\1\0\1\21\33\0\2\21\7\0\16\21\1\353\11\21"+
    "\1\0\1\21\33\0\2\21\7\0\6\21\1\354\7\21"+
    "\1\355\11\21\1\0\1\21\33\0\2\21\7\0\4\21"+
    "\1\356\23\21\1\0\1\21\33\0\2\21\7\0\2\21"+
    "\1\357\25\21\1\0\1\21\33\0\2\21\33\0\1\360"+
    "\51\0\1\361\105\0\1\362\110\0\1\363\65\0\1\364"+
    "\75\0\1\365\67\0\1\366\74\0\1\367\75\0\1\370"+
    "\107\0\1\371\72\0\1\372\66\0\1\373\125\0\1\374"+
    "\113\0\1\375\13\0\1\302\21\0\1\376\55\0\3\202"+
    "\1\201\1\304\71\202\6\0\1\21\1\377\26\21\1\0"+
    "\1\21\33\0\2\21\7\0\12\21\1\102\15\21\1\0"+
    "\1\21\33\0\2\21\7\0\7\21\1\102\20\21\1\0"+
    "\1\21\33\0\2\21\7\0\10\21\1\u0100\17\21\1\0"+
    "\1\21\33\0\2\21\7\0\16\21\1\u0101\11\21\1\0"+
    "\1\21\33\0\2\21\7\0\11\21\1\u0102\16\21\1\0"+
    "\1\21\33\0\2\21\7\0\30\21\1\0\1\u0103\33\0"+
    "\2\21\7\0\4\21\1\u0104\23\21\1\0\1\21\33\0"+
    "\2\21\7\0\4\21\1\u0105\23\21\1\0\1\21\33\0"+
    "\2\21\7\0\5\21\1\u0106\22\21\1\0\1\21\33\0"+
    "\2\21\7\0\7\21\1\u0107\20\21\1\0\1\21\33\0"+
    "\2\21\7\0\16\21\1\u0108\11\21\1\0\1\21\33\0"+
    "\2\21\7\0\5\21\1\u0109\22\21\1\0\1\21\33\0"+
    "\2\21\7\0\1\u010a\27\21\1\0\1\21\33\0\2\21"+
    "\7\0\11\21\1\u010b\16\21\1\0\1\21\33\0\2\21"+
    "\7\0\16\21\1\u010c\11\21\1\0\1\21\33\0\2\21"+
    "\7\0\1\21\1\u010d\26\21\1\0\1\21\33\0\2\21"+
    "\7\0\6\21\1\u010e\21\21\1\0\1\21\33\0\2\21"+
    "\7\0\5\21\1\u010f\22\21\1\0\1\21\33\0\2\21"+
    "\7\0\2\21\1\u0110\25\21\1\0\1\21\33\0\2\21"+
    "\7\0\10\21\1\u0111\17\21\1\0\1\21\33\0\2\21"+
    "\7\0\10\21\1\u0112\17\21\1\0\1\21\33\0\2\21"+
    "\7\0\1\21\1\u0113\26\21\1\0\1\21\33\0\2\21"+
    "\7\0\2\21\1\u0114\25\21\1\0\1\21\33\0\2\21"+
    "\7\0\6\21\1\u0115\21\21\1\0\1\21\33\0\2\21"+
    "\7\0\1\21\1\u0116\2\21\1\u0117\23\21\1\0\1\21"+
    "\33\0\2\21\7\0\11\21\1\u0118\16\21\1\0\1\21"+
    "\33\0\2\21\7\0\4\21\1\u0119\23\21\1\0\1\21"+
    "\33\0\2\21\7\0\14\21\1\102\13\21\1\0\1\21"+
    "\33\0\2\21\7\0\4\21\1\u011a\23\21\1\0\1\21"+
    "\33\0\2\21\7\0\1\21\1\u011b\26\21\1\0\1\21"+
    "\33\0\2\21\7\0\1\21\1\u011c\26\21\1\0\1\21"+
    "\33\0\2\21\7\0\5\21\1\u011d\22\21\1\0\1\21"+
    "\33\0\2\21\7\0\22\21\1\u011e\5\21\1\0\1\21"+
    "\33\0\2\21\7\0\1\21\1\u011f\26\21\1\0\1\21"+
    "\33\0\2\21\7\0\11\21\1\u0120\16\21\1\0\1\21"+
    "\33\0\2\21\7\0\5\21\1\u0121\22\21\1\0\1\21"+
    "\33\0\2\21\7\0\2\21\1\u011d\25\21\1\0\1\21"+
    "\33\0\2\21\7\0\10\21\1\u0122\17\21\1\0\1\21"+
    "\33\0\2\21\7\0\4\21\1\u0123\23\21\1\0\1\21"+
    "\33\0\2\21\7\0\1\u0124\16\0\1\u0124\71\0\1\u0125"+
    "\105\0\1\u0126\77\0\1\u0127\53\0\1\u0128\105\0\1\u0129"+
    "\101\0\1\u0124\65\0\1\u012a\1\0\1\u012b\113\0\1\u012c"+
    "\50\0\1\u012d\102\0\1\373\76\0\1\u0124\110\0\1\u012e"+
    "\52\0\3\21\1\u012f\24\21\1\0\1\21\33\0\2\21"+
    "\7\0\5\21\1\u0130\22\21\1\0\1\21\33\0\2\21"+
    "\7\0\1\21\1\u0131\26\21\1\0\1\21\33\0\2\21"+
    "\7\0\1\21\1\u0132\26\21\1\0\1\21\33\0\2\21"+
    "\7\0\1\234\27\21\1\0\1\21\33\0\2\21\7\0"+
    "\14\21\1\310\13\21\1\0\1\21\33\0\2\21\7\0"+
    "\23\21\1\u0133\4\21\1\0\1\21\33\0\2\21\7\0"+
    "\1\102\27\21\1\0\1\21\33\0\2\21\7\0\24\21"+
    "\1\u0134\3\21\1\0\1\21\33\0\2\21\7\0\12\21"+
    "\1\u0135\15\21\1\0\1\21\33\0\2\21\7\0\5\21"+
    "\1\u0136\22\21\1\0\1\21\33\0\2\21\7\0\11\21"+
    "\1\u0137\16\21\1\0\1\21\33\0\2\21\7\0\11\21"+
    "\1\120\16\21\1\0\1\21\33\0\2\21\7\0\2\21"+
    "\1\212\25\21\1\0\1\21\33\0\2\21\7\0\4\21"+
    "\1\u0100\23\21\1\0\1\21\33\0\2\21\7\0\4\21"+
    "\1\u0111\23\21\1\0\1\21\33\0\2\21\7\0\16\21"+
    "\1\u0138\11\21\1\0\1\21\33\0\2\21\7\0\1\u0139"+
    "\27\21\1\0\1\21\33\0\2\21\7\0\2\21\1\u013a"+
    "\25\21\1\0\1\21\33\0\2\21\7\0\14\21\1\u013b"+
    "\13\21\1\0\1\21\33\0\2\21\7\0\5\21\1\u013c"+
    "\22\21\1\0\1\21\33\0\2\21\7\0\1\21\1\u013d"+
    "\26\21\1\0\1\21\33\0\2\21\7\0\15\21\1\u0133"+
    "\12\21\1\0\1\21\33\0\2\21\7\0\22\21\1\u013e"+
    "\5\21\1\0\1\21\33\0\2\21\7\0\1\u013f\27\21"+
    "\1\0\1\21\33\0\2\21\7\0\10\21\1\120\17\21"+
    "\1\0\1\21\33\0\2\21\7\0\7\21\1\u0140\20\21"+
    "\1\0\1\21\33\0\2\21\7\0\4\21\1\u0120\23\21"+
    "\1\0\1\21\33\0\2\21\7\0\4\21\1\u0141\23\21"+
    "\1\0\1\21\33\0\2\21\7\0\16\21\1\u0142\11\21"+
    "\1\0\1\21\33\0\2\21\7\0\25\21\1\u0143\2\21"+
    "\1\0\1\21\33\0\2\21\7\0\1\u0144\27\21\1\0"+
    "\1\21\33\0\2\21\7\0\12\21\1\u0145\15\21\1\0"+
    "\1\21\33\0\2\21\20\0\1\u0146\111\0\1\u0147\54\0"+
    "\1\u0148\72\0\1\u0149\125\0\1\u014a\53\0\1\u014b\105\0"+
    "\1\u014c\64\0\1\u014d\73\0\1\u014e\71\0\2\21\1\120"+
    "\25\21\1\0\1\21\33\0\2\21\7\0\6\21\1\u014f"+
    "\21\21\1\0\1\21\33\0\2\21\7\0\1\212\27\21"+
    "\1\0\1\21\33\0\2\21\7\0\5\21\1\u0150\22\21"+
    "\1\0\1\21\33\0\2\21\7\0\1\21\1\u0151\26\21"+
    "\1\0\1\21\33\0\2\21\7\0\4\21\1\u0152\23\21"+
    "\1\0\1\21\33\0\2\21\7\0\13\21\1\u0153\14\21"+
    "\1\0\1\21\33\0\2\21\7\0\12\21\1\u0154\15\21"+
    "\1\0\1\21\33\0\2\21\7\0\21\21\1\102\6\21"+
    "\1\0\1\21\33\0\2\21\7\0\4\21\1\u0155\23\21"+
    "\1\0\1\21\33\0\2\21\7\0\1\u0156\27\21\1\0"+
    "\1\21\33\0\2\21\7\0\14\21\1\u0157\13\21\1\0"+
    "\1\21\33\0\2\21\7\0\4\21\1\u0158\23\21\1\0"+
    "\1\21\33\0\2\21\7\0\10\21\1\u0159\17\21\1\0"+
    "\1\21\33\0\2\21\7\0\7\21\1\u0120\20\21\1\0"+
    "\1\21\33\0\2\21\7\0\7\21\1\u015a\20\21\1\0"+
    "\1\21\33\0\2\21\7\0\10\21\1\u0120\17\21\1\0"+
    "\1\21\33\0\2\21\7\0\25\21\1\u015b\2\21\1\0"+
    "\1\21\33\0\2\21\7\0\10\21\1\u015c\17\21\1\0"+
    "\1\21\33\0\2\21\7\0\13\21\1\u015d\14\21\1\0"+
    "\1\21\33\0\2\21\23\0\1\u015e\72\0\1\u015f\75\0"+
    "\1\u0160\66\0\1\u014e\111\0\1\u0161\75\0\1\u0162\63\0"+
    "\1\u0163\75\0\1\372\100\0\1\u0124\66\0\4\21\1\u0164"+
    "\23\21\1\0\1\21\33\0\2\21\7\0\1\120\27\21"+
    "\1\0\1\21\33\0\2\21\7\0\25\21\1\u0165\2\21"+
    "\1\0\1\21\33\0\2\21\7\0\5\21\1\u0166\22\21"+
    "\1\0\1\21\33\0\2\21\7\0\4\21\1\u0157\23\21"+
    "\1\0\1\21\33\0\2\21\7\0\13\21\1\u0167\14\21"+
    "\1\0\1\21\33\0\2\21\7\0\5\21\1\u0168\22\21"+
    "\1\0\1\21\33\0\2\21\7\0\4\21\1\344\23\21"+
    "\1\0\1\21\33\0\2\21\7\0\23\21\1\u0169\4\21"+
    "\1\0\1\21\33\0\2\21\7\0\16\21\1\u016a\11\21"+
    "\1\0\1\21\33\0\2\21\7\0\14\21\1\u0120\13\21"+
    "\1\0\1\21\33\0\2\21\16\0\1\u016b\67\0\1\u016c"+
    "\2\0\1\u016d\102\0\1\u016e\70\0\1\u0124\104\0\1\u016f"+
    "\73\0\1\u0124\64\0\13\21\1\u0170\14\21\1\0\1\21"+
    "\33\0\2\21\7\0\15\21\1\102\12\21\1\0\1\21"+
    "\33\0\2\21\7\0\10\21\1\310\17\21\1\0\1\21"+
    "\33\0\2\21\7\0\1\21\1\u0171\26\21\1\0\1\21"+
    "\33\0\2\21\7\0\13\21\1\u0172\14\21\1\0\1\21"+
    "\33\0\2\21\13\0\1\u0173\117\0\1\u0174\56\0\1\u0175"+
    "\101\0\1\u0176\67\0\1\u0124\70\0\5\21\1\u0151\22\21"+
    "\1\0\1\21\33\0\2\21\7\0\1\u011d\27\21\1\0"+
    "\1\21\33\0\2\21\7\0\5\21\1\u0120\22\21\1\0"+
    "\1\21\33\0\2\21\17\0\1\u0177\112\0\1\u0178\73\0"+
    "\1\u0179\63\0\1\u017a\107\0\1\u017b\65\0\1\u017c\104\0"+
    "\1\u017d\66\0\1\u017e\67\0\1\u017f\77\0\1\u0180\75\0"+
    "\1\u0181\75\0\1\u0182\112\0\1\u0124\61\0\1\u0183\71\0"+
    "\1\u0184\116\0\1\u0185\75\0\1\u0186\64\0\1\u0187\73\0"+
    "\1\u0188\64\0\1\u0189\100\0\1\u018a\101\0\1\u018b\66\0"+
    "\1\u018c\75\0\1\u0124\110\0\1\u014c\53\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21700];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\33\1\2\11\2\1\1\11\5\1\2\11"+
    "\2\1\3\11\1\1\1\11\2\1\2\11\1\1\1\11"+
    "\1\1\1\0\1\11\1\0\55\1\6\0\1\1\2\0"+
    "\2\11\1\0\1\1\3\0\1\1\3\0\2\11\2\1"+
    "\1\11\2\0\61\1\20\0\53\1\14\0\2\11\1\0"+
    "\45\1\1\11\11\0\1\11\27\1\11\0\17\1\6\0"+
    "\7\1\5\0\3\1\4\0\1\11\25\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[396];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
//Variables globales para ser accedidas después
public String lexeme;
public int linea;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 186) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 48: 
          { {lexeme=yytext(); return SELEC;}
          }
        case 56: break;
        case 9: 
          { lexeme=yytext(); return PAF;
          }
        case 57: break;
        case 5: 
          { lexeme=yytext(); return ID;
          }
        case 58: break;
        case 7: 
          { lexeme=yytext(); return PAI;
          }
        case 59: break;
        case 24: 
          { lexeme=yytext(); return INT;
          }
        case 60: break;
        case 33: 
          { lexeme=yytext(); return COMPARACION;
          }
        case 61: break;
        case 30: 
          { lexeme=yytext(); return DIFERENTE;
          }
        case 62: break;
        case 29: 
          { lexeme=yytext(); linea = yyline; return ERROR;
          }
        case 63: break;
        case 51: 
          { {lexeme=yytext(); return INCLUI;}
          }
        case 64: break;
        case 55: 
          { lexeme=yytext(); return ACCDB;
          }
        case 65: break;
        case 54: 
          { {lexeme=yytext(); return FUN;}
          }
        case 66: break;
        case 38: 
          { {lexeme=yytext(); return ELS;}
          }
        case 67: break;
        case 20: 
          { lexeme=yytext(); return SIGNIN;
          }
        case 68: break;
        case 26: 
          { lexeme=yytext(); return PALABRARESERVADA;
          }
        case 69: break;
        case 34: 
          { {lexeme=yytext(); return REAL;}
          }
        case 70: break;
        case 23: 
          { lexeme=yytext(); return PUNTOYCOMA;
          }
        case 71: break;
        case 41: 
          { lexeme=yytext(); return CONSTANTE;
          }
        case 72: break;
        case 22: 
          { lexeme=yytext(); return DOSPUNTOS;
          }
        case 73: break;
        case 28: 
          { lexeme=yytext(); return SI;
          }
        case 74: break;
        case 40: 
          { lexeme=yytext(); return ARGBD;
          }
        case 75: break;
        case 1: 
          { lexeme=yytext();linea = yyline+1; return ERROR;
          }
        case 76: break;
        case 4: 
          { lexeme=yytext(); return COMMENT;
          }
        case 77: break;
        case 39: 
          { lexeme=yytext(); return TIPODEDATOL;
          }
        case 78: break;
        case 19: 
          { lexeme=yytext(); return ETF;
          }
        case 79: break;
        case 42: 
          { {lexeme=yytext(); return BREA;}
          }
        case 80: break;
        case 18: 
          { lexeme=yytext(); return ETI;
          }
        case 81: break;
        case 16: 
          { lexeme=yytext(); return LLAVEA;
          }
        case 82: break;
        case 6: 
          { lexeme=yytext(); return VARIABLE;
          }
        case 83: break;
        case 11: 
          { lexeme=yytext(); return PUNTO;
          }
        case 84: break;
        case 27: 
          { {lexeme=yytext(); return HMIENTR;}
          }
        case 85: break;
        case 52: 
          { lexeme=yytext(); return CONSTP;
          }
        case 86: break;
        case 36: 
          { lexeme=yytext(); return ENT;
          }
        case 87: break;
        case 25: 
          { lexeme=yytext(); return SLASH;
          }
        case 88: break;
        case 44: 
          { {lexeme=yytext(); return MIENTR;}
          }
        case 89: break;
        case 32: 
          { lexeme=yytext(); return FINPHP;
          }
        case 90: break;
        case 35: 
          { {lexeme=yytext(); return PARA;}
          }
        case 91: break;
        case 49: 
          { {lexeme=yytext(); return RET;}
          }
        case 92: break;
        case 53: 
          { {lexeme=yytext(); return CONTIN;}
          }
        case 93: break;
        case 50: 
          { {lexeme=yytext(); return PARAC;}
          }
        case 94: break;
        case 2: 
          { lexeme=yytext(); return ESPACIO;
          }
        case 95: break;
        case 14: 
          { lexeme=yytext(); return PAA;
          }
        case 96: break;
        case 8: 
          { lexeme=yytext(); return COMILLA;
          }
        case 97: break;
        case 17: 
          { lexeme=yytext(); return LLAVEC;
          }
        case 98: break;
        case 46: 
          { lexeme=yytext(); return INICIOPHP;
          }
        case 99: break;
        case 45: 
          { lexeme=yytext(); return VARPRE;
          }
        case 100: break;
        case 21: 
          { lexeme=yytext(); return ASIGNACION;
          }
        case 101: break;
        case 47: 
          { lexeme=yytext(); return CADENA;
          }
        case 102: break;
        case 3: 
          { lexeme=yytext(); return OPERADORARITMETICO;
          }
        case 103: break;
        case 12: 
          { lexeme=yytext(); return COMA;
          }
        case 104: break;
        case 31: 
          { lexeme=yytext(); return TEXTO;
          }
        case 105: break;
        case 37: 
          { {lexeme=yytext(); return BOOL;}
          }
        case 106: break;
        case 13: 
          { lexeme=yytext(); return ARR;
          }
        case 107: break;
        case 15: 
          { lexeme=yytext(); return PAC;
          }
        case 108: break;
        case 10: 
          { lexeme=yytext(); return OPERADORLOGICO;
          }
        case 109: break;
        case 43: 
          { lexeme=yytext(); return REA;
          }
        case 110: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
