/* The following code was generated by JFlex 1.4.3 on 4/5/18 6:27 PM */

package analizador;
import static analizador.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/5/18 6:27 PM from the specification file
 * <tt>C:/Users/Jose Mansilla/Documents/analizadorLexico-Java/src/analizador/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\71\1\2\2\0\1\1\22\0\1\60\1\45\1\51\1\53"+
    "\1\35\1\44\1\46\1\55\1\56\1\57\1\4\1\42\1\52\1\43"+
    "\1\50\1\3\12\73\1\67\1\70\1\63\1\66\1\64\1\65\1\54"+
    "\1\6\1\10\1\5\1\21\1\11\1\22\1\31\1\17\1\23\1\72"+
    "\1\36\1\7\1\27\1\12\1\20\1\30\1\34\1\16\1\14\1\15"+
    "\1\13\1\24\1\33\1\25\1\26\1\72\1\37\1\74\1\41\1\44"+
    "\1\32\1\40\1\6\1\10\1\5\1\21\1\11\1\22\1\31\1\17"+
    "\1\23\1\72\1\36\1\7\1\27\1\12\1\20\1\30\1\34\1\16"+
    "\1\14\1\15\1\13\1\24\1\33\1\25\1\26\1\72\1\61\1\47"+
    "\1\62\1\53\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\26\4\1\5\1\6\1\7"+
    "\3\3\3\10\1\11\1\12\1\13\1\14\1\12\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\0\1\24\5\4\1\32"+
    "\23\4\1\10\1\4\1\33\6\4\1\34\11\4\6\0"+
    "\1\35\2\0\1\36\1\10\1\0\1\37\3\0\1\37"+
    "\3\0\1\40\1\41\1\42\2\31\2\0\36\4\1\43"+
    "\3\4\1\44\16\4\20\0\1\31\7\4\1\45\1\46"+
    "\6\4\1\47\32\4\14\0\1\50\1\27\1\0\1\4"+
    "\1\51\2\4\1\52\15\4\1\53\2\4\1\32\16\4"+
    "\1\54\1\55\11\0\1\56\5\4\1\57\1\60\1\61"+
    "\17\4\11\0\1\4\1\45\1\4\1\32\1\4\1\62"+
    "\1\63\5\4\1\64\2\4\6\0\1\65\1\4\1\66"+
    "\4\4\5\0\3\4\4\0\1\67\25\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[392];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\75\0\172\0\267\0\364\0\u0131\0\u016e"+
    "\0\u01ab\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319\0\u0356"+
    "\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4\0\u0501\0\u053e"+
    "\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f\0\75\0\u06ac\0\u06e9"+
    "\0\75\0\u0726\0\u0763\0\u07a0\0\u07dd\0\u081a\0\75\0\75"+
    "\0\u0857\0\u0894\0\75\0\75\0\75\0\u08d1\0\75\0\u090e"+
    "\0\u094b\0\75\0\75\0\u0988\0\75\0\u09c5\0\u0a02\0\75"+
    "\0\u0a3f\0\u0a7c\0\u0ab9\0\u0af6\0\u0b33\0\u0356\0\u0b70\0\u0bad"+
    "\0\u0bea\0\u0c27\0\u0c64\0\u0ca1\0\u0cde\0\u0d1b\0\u0d58\0\u0d95"+
    "\0\u0dd2\0\u0e0f\0\u0e4c\0\u0e89\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d"+
    "\0\u0fba\0\u0356\0\u0ff7\0\u1034\0\u1071\0\u10ae\0\u10eb\0\u1128"+
    "\0\u1165\0\u11a2\0\u0356\0\u11df\0\u121c\0\u1259\0\u1296\0\u12d3"+
    "\0\u1310\0\u134d\0\u138a\0\u13c7\0\u1404\0\u1441\0\u147e\0\u14bb"+
    "\0\u14f8\0\u1535\0\u1572\0\u15af\0\u15ec\0\75\0\75\0\u081a"+
    "\0\u1629\0\u1666\0\u0857\0\u16a3\0\u0857\0\u16e0\0\u171d\0\u175a"+
    "\0\75\0\75\0\u1797\0\u17d4\0\75\0\u1811\0\u184e\0\u188b"+
    "\0\u18c8\0\u1905\0\u1942\0\u197f\0\u19bc\0\u19f9\0\u1a36\0\u1a73"+
    "\0\u1ab0\0\u1aed\0\u1b2a\0\u1b67\0\u1ba4\0\u1be1\0\u1c1e\0\u1c5b"+
    "\0\u1c98\0\u1cd5\0\u1d12\0\u1d4f\0\u1d8c\0\u1dc9\0\u1e06\0\u1e43"+
    "\0\u1e80\0\u1ebd\0\u1efa\0\u1f37\0\u1f74\0\u1fb1\0\u1fee\0\u202b"+
    "\0\u2068\0\u20a5\0\u20e2\0\u211f\0\u215c\0\u2199\0\u21d6\0\u2213"+
    "\0\u2250\0\u228d\0\u22ca\0\u2307\0\u2344\0\u2381\0\u23be\0\u23fb"+
    "\0\u2438\0\u2475\0\u24b2\0\u24ef\0\u252c\0\u2569\0\u25a6\0\u25e3"+
    "\0\u2620\0\u265d\0\u269a\0\u26d7\0\u2714\0\u2751\0\u278e\0\u27cb"+
    "\0\u1811\0\u2808\0\u2845\0\u2882\0\u28bf\0\u28fc\0\u2939\0\u2976"+
    "\0\u29b3\0\u0356\0\u29f0\0\u2a2d\0\u2a6a\0\u2aa7\0\u2ae4\0\u2b21"+
    "\0\u0356\0\u2b5e\0\u2b9b\0\u2bd8\0\u2c15\0\u2c52\0\u2c8f\0\u2ccc"+
    "\0\u2d09\0\u2d46\0\u2d83\0\u2dc0\0\u2dfd\0\u2e3a\0\u2e77\0\u2eb4"+
    "\0\u2ef1\0\u2f2e\0\u2f6b\0\u2fa8\0\u2fe5\0\u3022\0\u305f\0\u309c"+
    "\0\u30d9\0\u3116\0\u3153\0\u3190\0\u31cd\0\u320a\0\u3247\0\u3284"+
    "\0\u32c1\0\u32fe\0\u333b\0\u3378\0\u33b5\0\u33f2\0\u342f\0\75"+
    "\0\75\0\u346c\0\u34a9\0\u0356\0\u34e6\0\u3523\0\u0356\0\u3560"+
    "\0\u359d\0\u35da\0\u3617\0\u3654\0\u3691\0\u36ce\0\u370b\0\u3748"+
    "\0\u3785\0\u37c2\0\u37ff\0\u383c\0\u0356\0\u3879\0\u38b6\0\u38f3"+
    "\0\u3930\0\u396d\0\u39aa\0\u39e7\0\u3a24\0\u3a61\0\u3a9e\0\u3adb"+
    "\0\u3b18\0\u3b55\0\u3b92\0\u3bcf\0\u3c0c\0\u3c49\0\u0356\0\75"+
    "\0\u3c86\0\u3cc3\0\u3d00\0\u3d3d\0\u3d7a\0\u3db7\0\u3df4\0\u3e31"+
    "\0\u3e6e\0\75\0\u3eab\0\u3ee8\0\u3f25\0\u3f62\0\u3f9f\0\u0356"+
    "\0\u0356\0\u0356\0\u3fdc\0\u4019\0\u4056\0\u4093\0\u40d0\0\u410d"+
    "\0\u414a\0\u4187\0\u41c4\0\u4201\0\u423e\0\u427b\0\u42b8\0\u42f5"+
    "\0\u4332\0\u436f\0\u43ac\0\u43e9\0\u4426\0\u4463\0\u44a0\0\u44dd"+
    "\0\u451a\0\u4557\0\u4594\0\u0356\0\u45d1\0\u460e\0\u464b\0\u0356"+
    "\0\u460e\0\u4688\0\u46c5\0\u4702\0\u473f\0\u477c\0\u0356\0\u47b9"+
    "\0\u47f6\0\u4833\0\u4870\0\u48ad\0\u48ea\0\u4927\0\u4964\0\u0356"+
    "\0\u49a1\0\u0356\0\u49de\0\u4a1b\0\u4a58\0\u4a95\0\u4ad2\0\u4b0f"+
    "\0\u4b4c\0\u4b89\0\u4bc6\0\u4c03\0\u4c40\0\u4c7d\0\u4cba\0\u4cf7"+
    "\0\u4d34\0\u4d71\0\75\0\u4dae\0\u4deb\0\u4e28\0\u4e65\0\u4ea2"+
    "\0\u4edf\0\u4f1c\0\u4f59\0\u4f96\0\u4fd3\0\u5010\0\u504d\0\u508a"+
    "\0\u50c7\0\u5104\0\u5141\0\u517e\0\u51bb\0\u51f8\0\u5235\0\u5272";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[392];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\20\1\30"+
    "\1\31\1\32\1\33\1\20\1\34\1\20\1\35\1\2"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\2\1\50\1\51\1\52\1\53\1\3"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\3\1\20\1\64\1\65\100\0\1\66\1\67\61\0"+
    "\1\70\12\0\1\41\75\0\1\20\1\71\1\72\10\20"+
    "\1\73\14\20\1\0\1\20\33\0\2\20\6\0\3\20"+
    "\1\74\1\20\1\75\1\20\1\76\20\20\1\0\1\20"+
    "\33\0\2\20\6\0\16\20\1\77\11\20\1\0\1\20"+
    "\33\0\2\20\6\0\11\20\1\100\1\20\1\101\14\20"+
    "\1\0\1\20\33\0\2\20\6\0\1\102\1\20\1\103"+
    "\2\20\1\104\11\20\1\105\1\106\7\20\1\0\1\20"+
    "\33\0\2\20\6\0\1\20\1\107\2\20\1\110\1\20"+
    "\1\111\4\20\1\112\14\20\1\0\1\20\33\0\2\20"+
    "\6\0\5\20\1\113\1\20\1\114\20\20\1\0\1\20"+
    "\33\0\2\20\6\0\10\20\1\115\15\20\1\116\1\20"+
    "\1\0\1\20\33\0\2\20\6\0\11\20\1\117\1\120"+
    "\15\20\1\0\1\20\33\0\2\20\6\0\4\20\1\121"+
    "\23\20\1\0\1\20\33\0\2\20\6\0\30\20\1\0"+
    "\1\20\33\0\2\20\6\0\11\20\1\122\16\20\1\0"+
    "\1\20\33\0\2\20\6\0\4\20\1\123\6\20\1\124"+
    "\2\20\1\114\11\20\1\0\1\20\33\0\2\20\6\0"+
    "\1\20\1\125\1\126\3\20\1\127\4\20\1\130\2\20"+
    "\1\131\11\20\1\0\1\20\33\0\2\20\6\0\5\20"+
    "\1\132\1\20\1\113\5\20\1\133\4\20\1\134\5\20"+
    "\1\0\1\20\33\0\2\20\6\0\1\20\1\135\26\20"+
    "\1\0\1\20\33\0\2\20\6\0\13\20\1\21\14\20"+
    "\1\0\1\20\33\0\2\20\6\0\16\20\1\136\11\20"+
    "\1\0\1\20\33\0\2\20\6\0\6\20\1\137\2\20"+
    "\1\140\16\20\1\0\1\20\33\0\2\20\6\0\2\20"+
    "\1\141\10\20\1\142\14\20\1\0\1\20\33\0\2\20"+
    "\6\0\25\20\1\143\2\20\1\0\1\20\33\0\2\20"+
    "\6\0\12\20\1\144\15\20\1\0\1\20\33\0\2\20"+
    "\7\0\1\145\7\0\1\146\1\147\10\0\1\150\1\151"+
    "\1\152\40\0\1\153\41\0\1\154\76\0\1\41\75\0"+
    "\1\41\27\0\1\155\67\0\1\156\54\0\1\157\17\0"+
    "\1\70\55\0\1\157\113\0\1\70\11\0\35\160\1\0"+
    "\10\160\1\161\6\160\1\162\1\0\7\160\1\0\2\160"+
    "\4\0\35\163\1\0\10\163\1\164\3\163\1\165\2\163"+
    "\1\166\1\0\7\163\1\0\2\163\44\0\1\167\116\0"+
    "\1\170\73\0\1\171\74\0\1\70\1\0\1\172\13\0"+
    "\30\153\1\0\1\153\11\0\1\173\21\0\1\153\1\64"+
    "\1\0\1\66\1\174\1\175\72\66\4\176\1\177\70\176"+
    "\5\0\2\20\1\200\4\20\1\114\1\201\17\20\1\0"+
    "\1\20\33\0\2\20\6\0\1\20\1\202\11\20\1\203"+
    "\14\20\1\0\1\20\33\0\2\20\6\0\5\20\1\204"+
    "\22\20\1\0\1\20\33\0\2\20\6\0\7\20\1\205"+
    "\20\20\1\0\1\20\33\0\2\20\6\0\14\20\1\122"+
    "\13\20\1\0\1\20\33\0\2\20\6\0\7\20\1\206"+
    "\20\20\1\0\1\20\33\0\2\20\6\0\4\20\1\207"+
    "\23\20\1\0\1\20\33\0\2\20\6\0\13\20\1\210"+
    "\14\20\1\0\1\20\33\0\2\20\6\0\12\20\1\211"+
    "\15\20\1\0\1\20\33\0\2\20\6\0\7\20\1\212"+
    "\20\20\1\0\1\20\33\0\2\20\6\0\14\20\1\213"+
    "\13\20\1\0\1\20\33\0\2\20\6\0\1\20\1\214"+
    "\26\20\1\0\1\20\33\0\2\20\6\0\10\20\1\215"+
    "\5\20\1\206\11\20\1\0\1\20\33\0\2\20\6\0"+
    "\22\20\1\216\5\20\1\0\1\20\33\0\2\20\6\0"+
    "\26\20\1\76\1\20\1\0\1\20\33\0\2\20\6\0"+
    "\2\20\1\214\25\20\1\0\1\20\33\0\2\20\6\0"+
    "\10\20\1\122\17\20\1\0\1\20\33\0\2\20\6\0"+
    "\7\20\1\217\20\20\1\0\1\20\33\0\2\20\6\0"+
    "\4\20\1\76\23\20\1\0\1\20\33\0\2\20\6\0"+
    "\1\20\1\220\7\20\1\221\16\20\1\0\1\20\33\0"+
    "\2\20\6\0\16\20\1\222\11\20\1\0\1\20\33\0"+
    "\2\20\6\0\1\20\1\223\4\20\1\224\12\20\1\76"+
    "\6\20\1\0\1\20\33\0\2\20\6\0\11\20\1\225"+
    "\16\20\1\0\1\20\33\0\2\20\6\0\10\20\1\226"+
    "\16\20\1\227\1\0\1\20\33\0\2\20\6\0\1\230"+
    "\14\20\1\231\12\20\1\0\1\20\33\0\2\20\6\0"+
    "\6\20\1\232\21\20\1\0\1\20\33\0\2\20\6\0"+
    "\2\20\1\233\25\20\1\0\1\20\33\0\2\20\6\0"+
    "\13\20\1\234\14\20\1\0\1\20\33\0\2\20\6\0"+
    "\5\20\1\235\22\20\1\0\1\20\33\0\2\20\6\0"+
    "\11\20\1\236\16\20\1\0\1\20\33\0\2\20\6\0"+
    "\5\20\1\237\22\20\1\0\1\20\33\0\2\20\6\0"+
    "\1\240\6\20\1\241\1\242\17\20\1\0\1\20\33\0"+
    "\2\20\6\0\23\20\1\243\4\20\1\0\1\20\33\0"+
    "\2\20\6\0\11\20\1\76\16\20\1\0\1\20\33\0"+
    "\2\20\6\0\4\20\1\244\23\20\1\0\1\20\33\0"+
    "\2\20\6\0\3\20\1\245\24\20\1\0\1\20\33\0"+
    "\2\20\6\0\13\20\1\246\2\20\1\247\11\20\1\0"+
    "\1\20\33\0\2\20\6\0\13\20\1\250\14\20\1\0"+
    "\1\20\33\0\2\20\6\0\10\20\1\211\17\20\1\0"+
    "\1\20\33\0\2\20\6\0\1\251\1\20\1\252\2\20"+
    "\1\253\2\20\1\254\3\20\1\255\1\256\4\20\1\257"+
    "\5\20\1\0\1\20\33\0\2\20\6\0\16\20\1\260"+
    "\11\20\1\0\1\20\33\0\2\20\17\0\1\261\67\0"+
    "\1\262\100\0\1\263\76\0\1\264\64\0\1\265\72\0"+
    "\1\266\3\0\1\267\2\0\1\270\1\0\1\271\3\0"+
    "\1\272\5\0\1\273\1\274\50\0\30\153\1\0\1\153"+
    "\33\0\2\153\6\0\30\154\1\0\1\154\1\0\1\275"+
    "\17\0\1\154\11\0\2\154\51\0\1\173\22\0\1\155"+
    "\52\0\1\160\26\0\35\160\1\0\10\160\1\161\6\160"+
    "\1\162\10\160\1\0\2\160\52\0\1\163\26\0\35\163"+
    "\1\0\10\163\1\164\3\163\1\165\2\163\1\166\10\163"+
    "\1\0\2\163\74\0\1\276\31\0\1\277\137\0\1\173"+
    "\3\0\1\175\72\0\4\176\1\300\73\176\1\301\1\300"+
    "\70\176\5\0\2\20\1\302\25\20\1\0\1\20\33\0"+
    "\2\20\6\0\1\303\27\20\1\0\1\20\33\0\2\20"+
    "\6\0\7\20\1\304\20\20\1\0\1\20\33\0\2\20"+
    "\6\0\5\20\1\114\22\20\1\0\1\20\33\0\2\20"+
    "\6\0\7\20\1\305\1\306\17\20\1\0\1\20\33\0"+
    "\2\20\6\0\10\20\1\307\17\20\1\0\1\20\33\0"+
    "\2\20\6\0\10\20\1\76\17\20\1\0\1\20\33\0"+
    "\2\20\6\0\1\20\1\310\26\20\1\0\1\20\33\0"+
    "\2\20\6\0\2\20\1\311\25\20\1\0\1\20\33\0"+
    "\2\20\6\0\13\20\1\76\14\20\1\0\1\20\33\0"+
    "\2\20\6\0\4\20\1\312\23\20\1\0\1\20\33\0"+
    "\2\20\6\0\14\20\1\313\13\20\1\0\1\20\33\0"+
    "\2\20\6\0\2\20\1\76\25\20\1\0\1\20\33\0"+
    "\2\20\6\0\4\20\1\314\23\20\1\0\1\20\33\0"+
    "\2\20\6\0\4\20\1\315\23\20\1\0\1\20\33\0"+
    "\2\20\6\0\4\20\1\206\23\20\1\0\1\20\33\0"+
    "\2\20\6\0\10\20\1\316\17\20\1\0\1\20\33\0"+
    "\2\20\6\0\16\20\1\317\11\20\1\0\1\20\33\0"+
    "\2\20\6\0\10\20\1\320\17\20\1\0\1\20\33\0"+
    "\2\20\6\0\16\20\1\206\11\20\1\0\1\20\33\0"+
    "\2\20\6\0\4\20\1\321\23\20\1\0\1\20\33\0"+
    "\2\20\6\0\13\20\1\110\14\20\1\0\1\20\33\0"+
    "\2\20\6\0\6\20\1\322\21\20\1\0\1\20\33\0"+
    "\2\20\6\0\6\20\1\323\21\20\1\0\1\20\33\0"+
    "\2\20\6\0\2\20\1\324\25\20\1\0\1\20\33\0"+
    "\2\20\6\0\1\20\1\325\14\20\1\326\11\20\1\0"+
    "\1\20\33\0\2\20\6\0\3\20\1\327\24\20\1\0"+
    "\1\20\33\0\2\20\6\0\7\20\1\224\20\20\1\0"+
    "\1\20\33\0\2\20\6\0\1\20\1\330\26\20\1\0"+
    "\1\20\33\0\2\20\6\0\1\331\27\20\1\0\1\20"+
    "\33\0\2\20\6\0\4\20\1\332\23\20\1\0\1\20"+
    "\33\0\2\20\6\0\1\20\1\333\26\20\1\0\1\20"+
    "\33\0\2\20\6\0\2\20\1\334\25\20\1\0\1\20"+
    "\33\0\2\20\6\0\10\20\1\335\17\20\1\0\1\20"+
    "\33\0\2\20\6\0\4\20\1\336\23\20\1\0\1\20"+
    "\33\0\2\20\6\0\2\20\1\337\25\20\1\0\1\20"+
    "\33\0\2\20\6\0\2\20\1\340\25\20\1\0\1\20"+
    "\33\0\2\20\6\0\2\20\1\316\25\20\1\0\1\20"+
    "\33\0\2\20\6\0\10\20\1\341\17\20\1\0\1\20"+
    "\33\0\2\20\6\0\5\20\1\206\11\20\1\342\10\20"+
    "\1\0\1\20\33\0\2\20\6\0\3\20\1\105\24\20"+
    "\1\0\1\20\33\0\2\20\6\0\2\20\1\343\25\20"+
    "\1\0\1\20\33\0\2\20\6\0\16\20\1\344\11\20"+
    "\1\0\1\20\33\0\2\20\6\0\1\20\1\345\26\20"+
    "\1\0\1\20\33\0\2\20\6\0\11\20\1\346\16\20"+
    "\1\0\1\20\33\0\2\20\6\0\16\20\1\347\11\20"+
    "\1\0\1\20\33\0\2\20\6\0\6\20\1\350\7\20"+
    "\1\351\11\20\1\0\1\20\33\0\2\20\6\0\4\20"+
    "\1\352\23\20\1\0\1\20\33\0\2\20\6\0\2\20"+
    "\1\353\25\20\1\0\1\20\33\0\2\20\32\0\1\354"+
    "\50\0\1\355\104\0\1\356\107\0\1\357\64\0\1\360"+
    "\74\0\1\361\66\0\1\362\73\0\1\363\74\0\1\364"+
    "\106\0\1\365\71\0\1\366\65\0\1\367\124\0\1\370"+
    "\112\0\1\371\13\0\1\276\20\0\1\372\55\0\3\176"+
    "\1\175\1\300\70\176\5\0\1\20\1\373\26\20\1\0"+
    "\1\20\33\0\2\20\6\0\12\20\1\76\15\20\1\0"+
    "\1\20\33\0\2\20\6\0\7\20\1\76\20\20\1\0"+
    "\1\20\33\0\2\20\6\0\10\20\1\374\17\20\1\0"+
    "\1\20\33\0\2\20\6\0\16\20\1\375\11\20\1\0"+
    "\1\20\33\0\2\20\6\0\11\20\1\376\16\20\1\0"+
    "\1\20\33\0\2\20\6\0\30\20\1\0\1\377\33\0"+
    "\2\20\6\0\4\20\1\u0100\23\20\1\0\1\20\33\0"+
    "\2\20\6\0\4\20\1\u0101\23\20\1\0\1\20\33\0"+
    "\2\20\6\0\5\20\1\u0102\22\20\1\0\1\20\33\0"+
    "\2\20\6\0\7\20\1\u0103\20\20\1\0\1\20\33\0"+
    "\2\20\6\0\16\20\1\u0104\11\20\1\0\1\20\33\0"+
    "\2\20\6\0\5\20\1\u0105\22\20\1\0\1\20\33\0"+
    "\2\20\6\0\1\u0106\27\20\1\0\1\20\33\0\2\20"+
    "\6\0\11\20\1\u0107\16\20\1\0\1\20\33\0\2\20"+
    "\6\0\16\20\1\u0108\11\20\1\0\1\20\33\0\2\20"+
    "\6\0\1\20\1\u0109\26\20\1\0\1\20\33\0\2\20"+
    "\6\0\6\20\1\u010a\21\20\1\0\1\20\33\0\2\20"+
    "\6\0\5\20\1\u010b\22\20\1\0\1\20\33\0\2\20"+
    "\6\0\2\20\1\u010c\25\20\1\0\1\20\33\0\2\20"+
    "\6\0\10\20\1\u010d\17\20\1\0\1\20\33\0\2\20"+
    "\6\0\10\20\1\u010e\17\20\1\0\1\20\33\0\2\20"+
    "\6\0\1\20\1\u010f\26\20\1\0\1\20\33\0\2\20"+
    "\6\0\2\20\1\u0110\25\20\1\0\1\20\33\0\2\20"+
    "\6\0\6\20\1\u0111\21\20\1\0\1\20\33\0\2\20"+
    "\6\0\1\20\1\u0112\2\20\1\u0113\23\20\1\0\1\20"+
    "\33\0\2\20\6\0\11\20\1\u0114\16\20\1\0\1\20"+
    "\33\0\2\20\6\0\4\20\1\u0115\23\20\1\0\1\20"+
    "\33\0\2\20\6\0\14\20\1\76\13\20\1\0\1\20"+
    "\33\0\2\20\6\0\4\20\1\u0116\23\20\1\0\1\20"+
    "\33\0\2\20\6\0\1\20\1\u0117\26\20\1\0\1\20"+
    "\33\0\2\20\6\0\1\20\1\u0118\26\20\1\0\1\20"+
    "\33\0\2\20\6\0\5\20\1\u0119\22\20\1\0\1\20"+
    "\33\0\2\20\6\0\22\20\1\u011a\5\20\1\0\1\20"+
    "\33\0\2\20\6\0\1\20\1\u011b\26\20\1\0\1\20"+
    "\33\0\2\20\6\0\11\20\1\u011c\16\20\1\0\1\20"+
    "\33\0\2\20\6\0\5\20\1\u011d\22\20\1\0\1\20"+
    "\33\0\2\20\6\0\2\20\1\u0119\25\20\1\0\1\20"+
    "\33\0\2\20\6\0\10\20\1\u011e\17\20\1\0\1\20"+
    "\33\0\2\20\6\0\4\20\1\u011f\23\20\1\0\1\20"+
    "\33\0\2\20\6\0\1\u0120\16\0\1\u0120\70\0\1\u0121"+
    "\104\0\1\u0122\76\0\1\u0123\52\0\1\u0124\104\0\1\u0125"+
    "\100\0\1\u0120\64\0\1\u0126\1\0\1\u0127\112\0\1\u0128"+
    "\47\0\1\u0129\101\0\1\367\75\0\1\u0120\107\0\1\u012a"+
    "\51\0\3\20\1\u012b\24\20\1\0\1\20\33\0\2\20"+
    "\6\0\5\20\1\u012c\22\20\1\0\1\20\33\0\2\20"+
    "\6\0\1\20\1\u012d\26\20\1\0\1\20\33\0\2\20"+
    "\6\0\1\20\1\u012e\26\20\1\0\1\20\33\0\2\20"+
    "\6\0\1\230\27\20\1\0\1\20\33\0\2\20\6\0"+
    "\14\20\1\304\13\20\1\0\1\20\33\0\2\20\6\0"+
    "\23\20\1\u012f\4\20\1\0\1\20\33\0\2\20\6\0"+
    "\1\76\27\20\1\0\1\20\33\0\2\20\6\0\24\20"+
    "\1\u0130\3\20\1\0\1\20\33\0\2\20\6\0\12\20"+
    "\1\u0131\15\20\1\0\1\20\33\0\2\20\6\0\5\20"+
    "\1\u0132\22\20\1\0\1\20\33\0\2\20\6\0\11\20"+
    "\1\u0133\16\20\1\0\1\20\33\0\2\20\6\0\11\20"+
    "\1\114\16\20\1\0\1\20\33\0\2\20\6\0\2\20"+
    "\1\206\25\20\1\0\1\20\33\0\2\20\6\0\4\20"+
    "\1\374\23\20\1\0\1\20\33\0\2\20\6\0\4\20"+
    "\1\u010d\23\20\1\0\1\20\33\0\2\20\6\0\16\20"+
    "\1\u0134\11\20\1\0\1\20\33\0\2\20\6\0\1\u0135"+
    "\27\20\1\0\1\20\33\0\2\20\6\0\2\20\1\u0136"+
    "\25\20\1\0\1\20\33\0\2\20\6\0\14\20\1\u0137"+
    "\13\20\1\0\1\20\33\0\2\20\6\0\5\20\1\u0138"+
    "\22\20\1\0\1\20\33\0\2\20\6\0\1\20\1\u0139"+
    "\26\20\1\0\1\20\33\0\2\20\6\0\15\20\1\u012f"+
    "\12\20\1\0\1\20\33\0\2\20\6\0\22\20\1\u013a"+
    "\5\20\1\0\1\20\33\0\2\20\6\0\1\u013b\27\20"+
    "\1\0\1\20\33\0\2\20\6\0\10\20\1\114\17\20"+
    "\1\0\1\20\33\0\2\20\6\0\7\20\1\u013c\20\20"+
    "\1\0\1\20\33\0\2\20\6\0\4\20\1\u011c\23\20"+
    "\1\0\1\20\33\0\2\20\6\0\4\20\1\u013d\23\20"+
    "\1\0\1\20\33\0\2\20\6\0\16\20\1\u013e\11\20"+
    "\1\0\1\20\33\0\2\20\6\0\25\20\1\u013f\2\20"+
    "\1\0\1\20\33\0\2\20\6\0\1\u0140\27\20\1\0"+
    "\1\20\33\0\2\20\6\0\12\20\1\u0141\15\20\1\0"+
    "\1\20\33\0\2\20\17\0\1\u0142\110\0\1\u0143\53\0"+
    "\1\u0144\71\0\1\u0145\124\0\1\u0146\52\0\1\u0147\104\0"+
    "\1\u0148\63\0\1\u0149\72\0\1\u014a\70\0\2\20\1\114"+
    "\25\20\1\0\1\20\33\0\2\20\6\0\6\20\1\u014b"+
    "\21\20\1\0\1\20\33\0\2\20\6\0\1\206\27\20"+
    "\1\0\1\20\33\0\2\20\6\0\5\20\1\u014c\22\20"+
    "\1\0\1\20\33\0\2\20\6\0\1\20\1\u014d\26\20"+
    "\1\0\1\20\33\0\2\20\6\0\4\20\1\u014e\23\20"+
    "\1\0\1\20\33\0\2\20\6\0\13\20\1\u014f\14\20"+
    "\1\0\1\20\33\0\2\20\6\0\12\20\1\u0150\15\20"+
    "\1\0\1\20\33\0\2\20\6\0\21\20\1\76\6\20"+
    "\1\0\1\20\33\0\2\20\6\0\4\20\1\u0151\23\20"+
    "\1\0\1\20\33\0\2\20\6\0\1\u0152\27\20\1\0"+
    "\1\20\33\0\2\20\6\0\14\20\1\u0153\13\20\1\0"+
    "\1\20\33\0\2\20\6\0\4\20\1\u0154\23\20\1\0"+
    "\1\20\33\0\2\20\6\0\10\20\1\u0155\17\20\1\0"+
    "\1\20\33\0\2\20\6\0\7\20\1\u011c\20\20\1\0"+
    "\1\20\33\0\2\20\6\0\7\20\1\u0156\20\20\1\0"+
    "\1\20\33\0\2\20\6\0\10\20\1\u011c\17\20\1\0"+
    "\1\20\33\0\2\20\6\0\25\20\1\u0157\2\20\1\0"+
    "\1\20\33\0\2\20\6\0\10\20\1\u0158\17\20\1\0"+
    "\1\20\33\0\2\20\6\0\13\20\1\u0159\14\20\1\0"+
    "\1\20\33\0\2\20\22\0\1\u015a\71\0\1\u015b\74\0"+
    "\1\u015c\65\0\1\u014a\110\0\1\u015d\74\0\1\u015e\62\0"+
    "\1\u015f\74\0\1\366\77\0\1\u0120\65\0\4\20\1\u0160"+
    "\23\20\1\0\1\20\33\0\2\20\6\0\1\114\27\20"+
    "\1\0\1\20\33\0\2\20\6\0\25\20\1\u0161\2\20"+
    "\1\0\1\20\33\0\2\20\6\0\5\20\1\u0162\22\20"+
    "\1\0\1\20\33\0\2\20\6\0\4\20\1\u0153\23\20"+
    "\1\0\1\20\33\0\2\20\6\0\13\20\1\u0163\14\20"+
    "\1\0\1\20\33\0\2\20\6\0\5\20\1\u0164\22\20"+
    "\1\0\1\20\33\0\2\20\6\0\4\20\1\340\23\20"+
    "\1\0\1\20\33\0\2\20\6\0\23\20\1\u0165\4\20"+
    "\1\0\1\20\33\0\2\20\6\0\16\20\1\u0166\11\20"+
    "\1\0\1\20\33\0\2\20\6\0\14\20\1\u011c\13\20"+
    "\1\0\1\20\33\0\2\20\15\0\1\u0167\66\0\1\u0168"+
    "\2\0\1\u0169\101\0\1\u016a\67\0\1\u0120\103\0\1\u016b"+
    "\72\0\1\u0120\63\0\13\20\1\u016c\14\20\1\0\1\20"+
    "\33\0\2\20\6\0\15\20\1\76\12\20\1\0\1\20"+
    "\33\0\2\20\6\0\10\20\1\304\17\20\1\0\1\20"+
    "\33\0\2\20\6\0\1\20\1\u016d\26\20\1\0\1\20"+
    "\33\0\2\20\6\0\13\20\1\u016e\14\20\1\0\1\20"+
    "\33\0\2\20\12\0\1\u016f\116\0\1\u0170\55\0\1\u0171"+
    "\100\0\1\u0172\66\0\1\u0120\67\0\5\20\1\u014d\22\20"+
    "\1\0\1\20\33\0\2\20\6\0\1\u0119\27\20\1\0"+
    "\1\20\33\0\2\20\6\0\5\20\1\u011c\22\20\1\0"+
    "\1\20\33\0\2\20\16\0\1\u0173\111\0\1\u0174\72\0"+
    "\1\u0175\62\0\1\u0176\106\0\1\u0177\64\0\1\u0178\103\0"+
    "\1\u0179\65\0\1\u017a\66\0\1\u017b\76\0\1\u017c\74\0"+
    "\1\u017d\74\0\1\u017e\111\0\1\u0120\60\0\1\u017f\70\0"+
    "\1\u0180\115\0\1\u0181\74\0\1\u0182\63\0\1\u0183\72\0"+
    "\1\u0184\63\0\1\u0185\77\0\1\u0186\100\0\1\u0187\65\0"+
    "\1\u0188\74\0\1\u0120\107\0\1\u0148\53\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21167];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\32\1\1\11\2\1\1\11\5\1\2\11"+
    "\2\1\3\11\1\1\1\11\2\1\2\11\1\1\1\11"+
    "\1\1\1\0\1\11\54\1\6\0\1\1\2\0\2\11"+
    "\1\0\1\1\3\0\1\1\3\0\2\11\2\1\1\11"+
    "\2\0\61\1\20\0\53\1\14\0\2\11\1\0\45\1"+
    "\1\11\11\0\1\11\27\1\11\0\17\1\6\0\7\1"+
    "\5\0\3\1\4\0\1\11\25\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[392];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
public String lexeme;
public int linea;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 186) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 48: 
          { {lexeme=yytext(); return SELEC;}
          }
        case 56: break;
        case 7: 
          { lexeme=yytext(); return PAF;
          }
        case 57: break;
        case 4: 
          { lexeme=yytext(); return ID;
          }
        case 58: break;
        case 6: 
          { lexeme=yytext(); return PAI;
          }
        case 59: break;
        case 23: 
          { lexeme=yytext(); return INT;
          }
        case 60: break;
        case 33: 
          { lexeme=yytext(); return COMPARACION;
          }
        case 61: break;
        case 30: 
          { lexeme=yytext(); return DIFERENTE;
          }
        case 62: break;
        case 29: 
          { lexeme=yytext(); linea = yyline; return ERROR;
          }
        case 63: break;
        case 51: 
          { {lexeme=yytext(); return INCLUI;}
          }
        case 64: break;
        case 55: 
          { lexeme=yytext(); return ACCDB;
          }
        case 65: break;
        case 54: 
          { {lexeme=yytext(); return FUN;}
          }
        case 66: break;
        case 38: 
          { {lexeme=yytext(); return ELS;}
          }
        case 67: break;
        case 19: 
          { lexeme=yytext(); return SIGNIN;
          }
        case 68: break;
        case 26: 
          { lexeme=yytext(); return PALABRARESERVADA;
          }
        case 69: break;
        case 34: 
          { {lexeme=yytext(); return REAL;}
          }
        case 70: break;
        case 22: 
          { lexeme=yytext(); return PUNTOYCOMA;
          }
        case 71: break;
        case 41: 
          { lexeme=yytext(); return CONSTANTE;
          }
        case 72: break;
        case 21: 
          { lexeme=yytext(); return DOSPUNTOS;
          }
        case 73: break;
        case 28: 
          { lexeme=yytext(); return SI;
          }
        case 74: break;
        case 40: 
          { lexeme=yytext(); return ARGBD;
          }
        case 75: break;
        case 1: 
          { lexeme=yytext();linea = yyline+1; return ERROR;
          }
        case 76: break;
        case 25: 
          { lexeme=yytext(); return COMMENT;
          }
        case 77: break;
        case 39: 
          { lexeme=yytext(); return TIPODEDATOL;
          }
        case 78: break;
        case 18: 
          { lexeme=yytext(); return ETF;
          }
        case 79: break;
        case 42: 
          { {lexeme=yytext(); return BREA;}
          }
        case 80: break;
        case 17: 
          { lexeme=yytext(); return ETI;
          }
        case 81: break;
        case 15: 
          { lexeme=yytext(); return LLAVEA;
          }
        case 82: break;
        case 5: 
          { lexeme=yytext(); return VARIABLE;
          }
        case 83: break;
        case 9: 
          { lexeme=yytext(); return PUNTO;
          }
        case 84: break;
        case 27: 
          { {lexeme=yytext(); return HMIENTR;}
          }
        case 85: break;
        case 52: 
          { lexeme=yytext(); return CONSTP;
          }
        case 86: break;
        case 36: 
          { lexeme=yytext(); return ENT;
          }
        case 87: break;
        case 24: 
          { lexeme=yytext(); return SLASH;
          }
        case 88: break;
        case 44: 
          { {lexeme=yytext(); return MIENTR;}
          }
        case 89: break;
        case 32: 
          { lexeme=yytext(); return FINPHP;
          }
        case 90: break;
        case 35: 
          { {lexeme=yytext(); return PARA;}
          }
        case 91: break;
        case 49: 
          { {lexeme=yytext(); return RET;}
          }
        case 92: break;
        case 53: 
          { {lexeme=yytext(); return CONTIN;}
          }
        case 93: break;
        case 50: 
          { {lexeme=yytext(); return PARAC;}
          }
        case 94: break;
        case 2: 
          { lexeme=yytext(); return ESPACIO;
          }
        case 95: break;
        case 13: 
          { lexeme=yytext(); return PAA;
          }
        case 96: break;
        case 10: 
          { lexeme=yytext(); return COMILLA;
          }
        case 97: break;
        case 16: 
          { lexeme=yytext(); return LLAVEC;
          }
        case 98: break;
        case 46: 
          { lexeme=yytext(); return INICIOPHP;
          }
        case 99: break;
        case 45: 
          { lexeme=yytext(); return VARPRE;
          }
        case 100: break;
        case 20: 
          { lexeme=yytext(); return ASIGNACION;
          }
        case 101: break;
        case 47: 
          { lexeme=yytext(); return CADENA;
          }
        case 102: break;
        case 3: 
          { lexeme=yytext(); return OPERADORARITMETICO;
          }
        case 103: break;
        case 11: 
          { lexeme=yytext(); return COMA;
          }
        case 104: break;
        case 31: 
          { lexeme=yytext(); return TEXTO;
          }
        case 105: break;
        case 37: 
          { {lexeme=yytext(); return BOOL;}
          }
        case 106: break;
        case 12: 
          { lexeme=yytext(); return ARR;
          }
        case 107: break;
        case 14: 
          { lexeme=yytext(); return PAC;
          }
        case 108: break;
        case 8: 
          { lexeme=yytext(); return OPERADORLOGICO;
          }
        case 109: break;
        case 43: 
          { lexeme=yytext(); return REA;
          }
        case 110: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
