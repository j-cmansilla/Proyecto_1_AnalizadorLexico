/* The following code was generated by JFlex 1.4.3 on 4/1/18 6:24 PM */

package analizador;
import static analizador.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/1/18 6:24 PM from the specification file
 * <tt>C:/Users/Jose Mansilla/Documents/analizadorLexico-Java/src/analizador/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\60\1\60\2\0\1\60\22\0\1\57\1\44\2\0\1\31"+
    "\1\43\1\45\1\47\1\63\1\64\1\41\1\37\1\0\1\40\1\0"+
    "\1\42\12\62\1\0\1\50\1\51\1\56\1\53\1\52\1\0\1\1"+
    "\1\2\1\6\1\16\1\7\1\17\1\25\1\10\1\14\1\61\1\32"+
    "\1\11\1\23\1\13\1\12\1\24\1\30\1\5\1\3\1\4\1\15"+
    "\1\20\1\27\1\21\1\22\1\61\1\33\1\0\1\36\1\0\1\26"+
    "\1\0\1\1\1\2\1\6\1\16\1\7\1\17\1\25\1\10\1\14"+
    "\1\61\1\32\1\11\1\23\1\13\1\12\1\24\1\30\1\5\1\3"+
    "\1\4\1\15\1\20\1\27\1\21\1\22\1\61\1\54\1\46\1\55"+
    "\u1f9a\0\1\34\1\35\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\25\2\1\3\5\4\1\5\2\1\1\6"+
    "\1\7\2\1\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\2\1\17\20\2\1\5\5\2\1\20\3\2"+
    "\1\21\14\2\7\0\1\22\1\23\1\5\1\0\1\24"+
    "\1\0\1\25\1\26\1\0\27\2\1\27\7\2\1\30"+
    "\10\2\17\0\5\2\1\31\5\2\1\32\22\2\14\0"+
    "\1\33\1\0\1\14\1\2\1\34\21\2\1\35\1\2"+
    "\1\17\3\2\1\36\1\37\11\0\1\40\1\2\1\41"+
    "\1\42\1\43\13\2\11\0\1\17\4\2\1\44\1\2"+
    "\1\45\2\2\6\0\1\2\1\46\2\2\1\47\5\0"+
    "\1\2\23\0\1\50\12\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[318];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1\0\u02e6\0\u031b"+
    "\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459\0\u048e\0\u04c3"+
    "\0\u04f8\0\u052d\0\u0562\0\u0597\0\65\0\u05cc\0\u0601\0\u0636"+
    "\0\u066b\0\65\0\u06a0\0\u06d5\0\65\0\65\0\u070a\0\65"+
    "\0\u073f\0\u0774\0\65\0\u07a9\0\u01dd\0\u07de\0\u0813\0\u0848"+
    "\0\u087d\0\u08b2\0\u08e7\0\u091c\0\u0951\0\u0986\0\u09bb\0\u09f0"+
    "\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\u01dd\0\u0b2e\0\u0b63"+
    "\0\u0b98\0\u0bcd\0\u0c02\0\u01dd\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6"+
    "\0\u0d0b\0\u0d40\0\u0d75\0\u0daa\0\u0ddf\0\u0e14\0\u0e49\0\u0e7e"+
    "\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc\0\u0ff1\0\u1026"+
    "\0\u105b\0\u1090\0\u10c5\0\u10fa\0\65\0\65\0\u066b\0\65"+
    "\0\u112f\0\65\0\65\0\u1164\0\u1199\0\u11ce\0\u1203\0\u1238"+
    "\0\u126d\0\u12a2\0\u12d7\0\u130c\0\u1341\0\u1376\0\u13ab\0\u13e0"+
    "\0\u1415\0\u144a\0\u147f\0\u14b4\0\u14e9\0\u151e\0\u1553\0\u1588"+
    "\0\u15bd\0\u15f2\0\u1627\0\u165c\0\u1691\0\u16c6\0\u16fb\0\u1730"+
    "\0\u1765\0\u179a\0\u17cf\0\u1804\0\u1839\0\u186e\0\u18a3\0\u18d8"+
    "\0\u190d\0\u1942\0\u1977\0\u19ac\0\u19e1\0\u1a16\0\u1a4b\0\u1a80"+
    "\0\u1ab5\0\u1aea\0\u1b1f\0\u1b54\0\u1b89\0\u1bbe\0\u1bf3\0\u1c28"+
    "\0\u1c5d\0\u1c92\0\u1cc7\0\u1cfc\0\u1d31\0\u1d66\0\u1d9b\0\u1dd0"+
    "\0\u01dd\0\u1e05\0\u1e3a\0\u1e6f\0\u1ea4\0\u1ed9\0\u01dd\0\u1f0e"+
    "\0\u1f43\0\u1f78\0\u1fad\0\u1fe2\0\u2017\0\u204c\0\u2081\0\u20b6"+
    "\0\u20eb\0\u2120\0\u2155\0\u218a\0\u21bf\0\u21f4\0\u2229\0\u225e"+
    "\0\u2293\0\u22c8\0\u22fd\0\u2332\0\u2367\0\u239c\0\u23d1\0\u2406"+
    "\0\u243b\0\u2470\0\u24a5\0\u24da\0\u250f\0\65\0\u2544\0\65"+
    "\0\u2579\0\u01dd\0\u25ae\0\u25e3\0\u2618\0\u264d\0\u2682\0\u26b7"+
    "\0\u26ec\0\u2721\0\u2756\0\u278b\0\u27c0\0\u27f5\0\u282a\0\u285f"+
    "\0\u2894\0\u28c9\0\u28fe\0\u01dd\0\u2933\0\u2968\0\u299d\0\u29d2"+
    "\0\u2a07\0\u01dd\0\65\0\u2a3c\0\u2a71\0\u2aa6\0\u2adb\0\u2b10"+
    "\0\u2b45\0\u2b7a\0\u2baf\0\u2be4\0\65\0\u2c19\0\u01dd\0\u01dd"+
    "\0\u01dd\0\u2c4e\0\u2c83\0\u2cb8\0\u2ced\0\u2d22\0\u2d57\0\u2d8c"+
    "\0\u2dc1\0\u2df6\0\u2e2b\0\u2e60\0\u2e95\0\u2eca\0\u2eff\0\u2f34"+
    "\0\u2f69\0\u2f9e\0\u2fd3\0\u3008\0\u303d\0\u3072\0\u30a7\0\u30dc"+
    "\0\u3111\0\u3146\0\u3072\0\u317b\0\u01dd\0\u31b0\0\u31e5\0\u321a"+
    "\0\u324f\0\u3284\0\u32b9\0\u32ee\0\u3323\0\u3358\0\u01dd\0\u338d"+
    "\0\u33c2\0\u01dd\0\u33f7\0\u342c\0\u3461\0\u3496\0\u34cb\0\u3500"+
    "\0\u3535\0\u356a\0\u359f\0\u35d4\0\u3609\0\u363e\0\u3673\0\u36a8"+
    "\0\u36dd\0\u3712\0\u3747\0\u377c\0\u37b1\0\u37e6\0\u381b\0\u3850"+
    "\0\u3885\0\u38ba\0\u38ef\0\65\0\u3924\0\u3959\0\u398e\0\u39c3"+
    "\0\u39f8\0\u3a2d\0\u3a62\0\u3a97\0\u3acc\0\u3b01";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[318];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\12\1\25\1\26\1\12\1\27"+
    "\1\12\1\30\1\12\4\2\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\2\1\45\1\46\1\47\2\50\1\12\1\51\1\52"+
    "\1\53\66\0\1\12\1\54\1\55\7\12\1\56\15\12"+
    "\1\0\1\12\26\0\2\12\3\0\4\12\1\57\23\12"+
    "\1\0\1\12\26\0\2\12\3\0\3\12\1\60\22\12"+
    "\1\61\1\12\1\0\1\12\26\0\2\12\3\0\4\12"+
    "\1\62\2\12\1\63\20\12\1\0\1\12\26\0\2\12"+
    "\3\0\6\12\1\64\21\12\1\0\1\12\26\0\2\12"+
    "\3\0\1\65\7\12\1\66\1\67\16\12\1\0\1\12"+
    "\26\0\2\12\3\0\5\12\1\70\2\12\1\71\1\12"+
    "\1\72\4\12\1\73\1\74\7\12\1\0\1\12\26\0"+
    "\2\12\3\0\30\12\1\0\1\12\26\0\2\12\3\0"+
    "\13\12\1\75\14\12\1\0\1\12\26\0\2\12\3\0"+
    "\4\12\1\76\23\12\1\0\1\12\26\0\2\12\3\0"+
    "\1\77\5\12\1\100\2\12\1\101\16\12\1\0\1\12"+
    "\26\0\2\12\3\0\2\12\1\102\7\12\1\103\3\12"+
    "\1\104\3\12\1\105\5\12\1\0\1\12\26\0\2\12"+
    "\3\0\2\12\1\106\7\12\1\102\15\12\1\0\1\12"+
    "\26\0\2\12\3\0\6\12\1\107\2\12\1\110\1\12"+
    "\1\106\14\12\1\0\1\12\26\0\2\12\3\0\1\111"+
    "\7\12\1\112\1\113\1\12\1\114\1\115\13\12\1\0"+
    "\1\12\26\0\2\12\3\0\1\116\27\12\1\0\1\12"+
    "\26\0\2\12\3\0\11\12\1\14\16\12\1\0\1\12"+
    "\26\0\2\12\3\0\13\12\1\117\14\12\1\0\1\12"+
    "\26\0\2\12\3\0\4\12\1\120\7\12\1\121\13\12"+
    "\1\0\1\12\26\0\2\12\3\0\10\12\1\122\1\123"+
    "\16\12\1\0\1\12\26\0\2\12\3\0\7\12\1\124"+
    "\20\12\1\0\1\12\26\0\2\12\3\0\1\125\3\0"+
    "\1\126\2\0\1\127\13\0\1\130\1\131\1\132\75\0"+
    "\1\35\65\0\1\35\65\0\1\35\64\0\1\133\1\134"+
    "\100\0\1\135\53\0\1\136\65\0\1\136\17\0\30\137"+
    "\1\0\1\137\14\0\1\140\7\0\1\137\1\0\2\137"+
    "\54\0\1\141\65\0\1\142\67\0\1\143\70\0\1\51"+
    "\42\0\1\144\25\0\2\12\1\145\25\12\1\0\1\12"+
    "\26\0\2\12\3\0\15\12\1\76\12\12\1\0\1\12"+
    "\26\0\2\12\3\0\6\12\1\146\21\12\1\0\1\12"+
    "\26\0\2\12\3\0\1\147\3\12\1\150\23\12\1\0"+
    "\1\12\26\0\2\12\3\0\13\12\1\151\14\12\1\0"+
    "\1\12\26\0\2\12\3\0\1\152\13\12\1\153\4\12"+
    "\1\55\6\12\1\0\1\12\26\0\2\12\3\0\4\12"+
    "\1\154\23\12\1\0\1\12\26\0\2\12\3\0\3\12"+
    "\1\155\23\12\1\156\1\0\1\12\26\0\2\12\3\0"+
    "\2\12\1\106\1\157\24\12\1\0\1\12\26\0\2\12"+
    "\3\0\1\160\10\12\1\161\16\12\1\0\1\12\26\0"+
    "\2\12\3\0\12\12\1\162\15\12\1\0\1\12\26\0"+
    "\2\12\3\0\7\12\1\163\20\12\1\0\1\12\26\0"+
    "\2\12\3\0\2\12\1\164\25\12\1\0\1\12\26\0"+
    "\2\12\3\0\15\12\1\165\12\12\1\0\1\12\26\0"+
    "\2\12\3\0\1\166\27\12\1\0\1\12\26\0\2\12"+
    "\3\0\3\12\1\167\7\12\1\170\14\12\1\0\1\12"+
    "\26\0\2\12\3\0\2\12\1\170\25\12\1\0\1\12"+
    "\26\0\2\12\3\0\22\12\1\171\5\12\1\0\1\12"+
    "\26\0\2\12\3\0\26\12\1\55\1\12\1\0\1\12"+
    "\26\0\2\12\3\0\3\12\1\76\24\12\1\0\1\12"+
    "\26\0\2\12\3\0\2\12\1\172\25\12\1\0\1\12"+
    "\26\0\2\12\3\0\2\12\1\173\1\174\1\12\1\175"+
    "\22\12\1\0\1\12\26\0\2\12\3\0\23\12\1\176"+
    "\4\12\1\0\1\12\26\0\2\12\3\0\6\12\1\55"+
    "\21\12\1\0\1\12\26\0\2\12\3\0\5\12\1\177"+
    "\10\12\1\200\11\12\1\0\1\12\26\0\2\12\3\0"+
    "\14\12\1\201\13\12\1\0\1\12\26\0\2\12\3\0"+
    "\10\12\1\202\17\12\1\0\1\12\26\0\2\12\3\0"+
    "\11\12\1\203\16\12\1\0\1\12\26\0\2\12\3\0"+
    "\4\12\1\204\23\12\1\0\1\12\26\0\2\12\3\0"+
    "\12\12\1\205\15\12\1\0\1\12\26\0\2\12\3\0"+
    "\12\12\1\206\15\12\1\0\1\12\26\0\2\12\3\0"+
    "\4\12\1\55\23\12\1\0\1\12\26\0\2\12\3\0"+
    "\6\12\1\207\21\12\1\0\1\12\26\0\2\12\3\0"+
    "\11\12\1\210\1\12\1\211\14\12\1\0\1\12\26\0"+
    "\2\12\3\0\1\12\1\212\26\12\1\0\1\12\26\0"+
    "\2\12\3\0\11\12\1\213\16\12\1\0\1\12\26\0"+
    "\2\12\3\0\3\12\1\163\24\12\1\0\1\12\26\0"+
    "\2\12\3\0\13\12\1\214\14\12\1\0\1\12\26\0"+
    "\2\12\7\0\1\215\66\0\1\216\61\0\1\217\70\0"+
    "\1\220\65\0\1\221\56\0\1\222\1\0\1\223\1\224"+
    "\1\225\7\0\1\226\4\0\1\227\1\230\40\0\30\133"+
    "\1\0\1\133\6\0\1\231\15\0\4\133\3\0\30\134"+
    "\1\0\1\134\24\0\1\134\1\0\2\134\26\0\1\232"+
    "\122\0\1\233\3\0\3\12\1\234\24\12\1\0\1\12"+
    "\26\0\2\12\3\0\1\235\27\12\1\0\1\12\26\0"+
    "\2\12\3\0\3\12\1\236\24\12\1\0\1\12\26\0"+
    "\2\12\3\0\13\12\1\237\14\12\1\0\1\12\26\0"+
    "\2\12\3\0\3\12\1\240\24\12\1\0\1\12\26\0"+
    "\2\12\3\0\13\12\1\170\14\12\1\0\1\12\26\0"+
    "\2\12\3\0\6\12\1\241\21\12\1\0\1\12\26\0"+
    "\2\12\3\0\11\12\1\100\16\12\1\0\1\12\26\0"+
    "\2\12\3\0\14\12\1\242\13\12\1\0\1\12\26\0"+
    "\2\12\3\0\14\12\1\243\13\12\1\0\1\12\26\0"+
    "\2\12\3\0\5\12\1\244\22\12\1\0\1\12\26\0"+
    "\2\12\3\0\2\12\1\245\25\12\1\0\1\12\26\0"+
    "\2\12\3\0\12\12\1\106\15\12\1\0\1\12\26\0"+
    "\2\12\3\0\2\12\1\170\1\246\24\12\1\0\1\12"+
    "\26\0\2\12\3\0\11\12\1\55\16\12\1\0\1\12"+
    "\26\0\2\12\3\0\6\12\1\247\21\12\1\0\1\12"+
    "\26\0\2\12\3\0\15\12\1\250\12\12\1\0\1\12"+
    "\26\0\2\12\3\0\10\12\1\55\17\12\1\0\1\12"+
    "\26\0\2\12\3\0\6\12\1\251\21\12\1\0\1\12"+
    "\26\0\2\12\3\0\3\12\1\55\24\12\1\0\1\12"+
    "\26\0\2\12\3\0\6\12\1\252\21\12\1\0\1\12"+
    "\26\0\2\12\3\0\6\12\1\170\21\12\1\0\1\12"+
    "\26\0\2\12\3\0\3\12\1\253\24\12\1\0\1\12"+
    "\26\0\2\12\3\0\6\12\1\254\21\12\1\0\1\12"+
    "\26\0\2\12\3\0\10\12\1\255\17\12\1\0\1\12"+
    "\26\0\2\12\3\0\10\12\1\256\17\12\1\0\1\12"+
    "\26\0\2\12\3\0\10\12\1\257\17\12\1\0\1\12"+
    "\26\0\2\12\3\0\1\260\27\12\1\0\1\12\26\0"+
    "\2\12\3\0\1\12\1\261\26\12\1\0\1\12\26\0"+
    "\2\12\3\0\2\12\1\153\25\12\1\0\1\12\26\0"+
    "\2\12\3\0\1\262\27\12\1\0\1\12\26\0\2\12"+
    "\3\0\6\12\1\263\21\12\1\0\1\12\26\0\2\12"+
    "\3\0\1\264\27\12\1\0\1\12\26\0\2\12\3\0"+
    "\5\12\1\265\22\12\1\0\1\12\26\0\2\12\3\0"+
    "\10\12\1\266\17\12\1\0\1\12\26\0\2\12\3\0"+
    "\3\12\1\267\24\12\1\0\1\12\26\0\2\12\3\0"+
    "\12\12\1\170\4\12\1\270\10\12\1\0\1\12\26\0"+
    "\2\12\3\0\10\12\1\236\17\12\1\0\1\12\26\0"+
    "\2\12\3\0\1\12\1\73\26\12\1\0\1\12\26\0"+
    "\2\12\3\0\10\12\1\271\17\12\1\0\1\12\26\0"+
    "\2\12\27\0\1\272\45\0\1\273\62\0\1\274\104\0"+
    "\1\275\52\0\1\276\61\0\1\277\64\0\1\300\67\0"+
    "\1\301\65\0\1\302\65\0\1\303\62\0\1\304\61\0"+
    "\1\305\117\0\1\306\32\0\1\307\136\0\1\233\1\0"+
    "\1\310\1\0\4\12\1\311\23\12\1\0\1\12\26\0"+
    "\2\12\3\0\30\12\1\0\1\312\26\0\2\12\3\0"+
    "\13\12\1\313\14\12\1\0\1\12\26\0\2\12\3\0"+
    "\12\12\1\314\15\12\1\0\1\12\26\0\2\12\3\0"+
    "\5\12\1\315\22\12\1\0\1\12\26\0\2\12\3\0"+
    "\4\12\1\316\23\12\1\0\1\12\26\0\2\12\3\0"+
    "\13\12\1\317\14\12\1\0\1\12\26\0\2\12\3\0"+
    "\7\12\1\55\20\12\1\0\1\12\26\0\2\12\3\0"+
    "\2\12\1\55\25\12\1\0\1\12\26\0\2\12\3\0"+
    "\13\12\1\320\14\12\1\0\1\12\26\0\2\12\3\0"+
    "\6\12\1\321\21\12\1\0\1\12\26\0\2\12\3\0"+
    "\12\12\1\322\15\12\1\0\1\12\26\0\2\12\3\0"+
    "\2\12\1\323\25\12\1\0\1\12\26\0\2\12\3\0"+
    "\1\324\5\12\1\325\21\12\1\0\1\12\26\0\2\12"+
    "\3\0\4\12\1\326\23\12\1\0\1\12\26\0\2\12"+
    "\3\0\14\12\1\327\13\12\1\0\1\12\26\0\2\12"+
    "\3\0\6\12\1\330\21\12\1\0\1\12\26\0\2\12"+
    "\3\0\1\331\27\12\1\0\1\12\26\0\2\12\3\0"+
    "\14\12\1\332\13\12\1\0\1\12\26\0\2\12\3\0"+
    "\10\12\1\333\17\12\1\0\1\12\26\0\2\12\3\0"+
    "\3\12\1\334\24\12\1\0\1\12\26\0\2\12\3\0"+
    "\1\335\27\12\1\0\1\12\26\0\2\12\3\0\10\12"+
    "\1\336\17\12\1\0\1\12\26\0\2\12\3\0\3\12"+
    "\1\337\24\12\1\0\1\12\26\0\2\12\3\0\15\12"+
    "\1\55\12\12\1\0\1\12\26\0\2\12\3\0\6\12"+
    "\1\340\21\12\1\0\1\12\26\0\2\12\3\0\1\341"+
    "\27\12\1\0\1\12\26\0\2\12\3\0\6\12\1\342"+
    "\21\12\1\0\1\12\26\0\2\12\10\0\1\343\11\0"+
    "\1\343\56\0\1\344\76\0\1\345\66\0\1\346\40\0"+
    "\1\347\65\0\1\350\1\0\1\351\107\0\1\352\46\0"+
    "\1\353\72\0\1\343\55\0\1\354\56\0\1\305\65\0"+
    "\1\343\104\0\1\355\41\0\1\356\27\12\1\0\1\12"+
    "\26\0\2\12\3\0\5\12\1\55\22\12\1\0\1\12"+
    "\26\0\2\12\3\0\24\12\1\357\3\12\1\0\1\12"+
    "\26\0\2\12\3\0\7\12\1\360\20\12\1\0\1\12"+
    "\26\0\2\12\3\0\12\12\1\361\15\12\1\0\1\12"+
    "\26\0\2\12\3\0\4\12\1\362\23\12\1\0\1\12"+
    "\26\0\2\12\3\0\12\12\1\363\15\12\1\0\1\12"+
    "\26\0\2\12\3\0\5\12\1\177\22\12\1\0\1\12"+
    "\26\0\2\12\3\0\15\12\1\245\12\12\1\0\1\12"+
    "\26\0\2\12\3\0\23\12\1\364\4\12\1\0\1\12"+
    "\26\0\2\12\3\0\12\12\1\365\15\12\1\0\1\12"+
    "\26\0\2\12\3\0\1\366\27\12\1\0\1\12\26\0"+
    "\2\12\3\0\16\12\1\364\11\12\1\0\1\12\26\0"+
    "\2\12\3\0\15\12\1\367\12\12\1\0\1\12\26\0"+
    "\2\12\3\0\22\12\1\370\5\12\1\0\1\12\26\0"+
    "\2\12\3\0\4\12\1\106\23\12\1\0\1\12\26\0"+
    "\2\12\3\0\10\12\1\170\17\12\1\0\1\12\26\0"+
    "\2\12\3\0\6\12\1\334\21\12\1\0\1\12\26\0"+
    "\2\12\3\0\5\12\1\371\22\12\1\0\1\12\26\0"+
    "\2\12\3\0\10\12\1\372\17\12\1\0\1\12\26\0"+
    "\2\12\3\0\13\12\1\373\14\12\1\0\1\12\26\0"+
    "\2\12\3\0\5\12\1\374\22\12\1\0\1\12\26\0"+
    "\2\12\3\0\3\12\1\106\24\12\1\0\1\12\26\0"+
    "\2\12\7\0\1\375\105\0\1\376\45\0\1\377\56\0"+
    "\1\u0100\66\0\1\u0101\101\0\1\u0102\61\0\1\u0103\101\0"+
    "\1\u0104\41\0\1\u0105\56\0\5\12\1\170\22\12\1\0"+
    "\1\12\26\0\2\12\3\0\6\12\1\u0106\21\12\1\0"+
    "\1\12\26\0\2\12\3\0\14\12\1\u0107\13\12\1\0"+
    "\1\12\26\0\2\12\3\0\1\u0108\27\12\1\0\1\12"+
    "\26\0\2\12\3\0\5\12\1\u0109\22\12\1\0\1\12"+
    "\26\0\2\12\3\0\15\12\1\u010a\12\12\1\0\1\12"+
    "\26\0\2\12\3\0\6\12\1\u010b\21\12\1\0\1\12"+
    "\26\0\2\12\3\0\6\12\1\u010c\21\12\1\0\1\12"+
    "\26\0\2\12\3\0\7\12\1\u010d\20\12\1\0\1\12"+
    "\26\0\2\12\3\0\21\12\1\55\6\12\1\0\1\12"+
    "\26\0\2\12\3\0\11\12\1\u010e\16\12\1\0\1\12"+
    "\26\0\2\12\3\0\3\12\1\u010f\24\12\1\0\1\12"+
    "\26\0\2\12\20\0\1\u0110\53\0\1\u0111\64\0\1\u0112"+
    "\70\0\1\u0105\67\0\1\u0113\57\0\1\u0114\64\0\1\304"+
    "\71\0\1\u0115\53\0\1\343\62\0\25\12\1\u0116\2\12"+
    "\1\0\1\12\26\0\2\12\3\0\6\12\1\u0117\21\12"+
    "\1\0\1\12\26\0\2\12\3\0\5\12\1\106\22\12"+
    "\1\0\1\12\26\0\2\12\3\0\6\12\1\u010a\21\12"+
    "\1\0\1\12\26\0\2\12\3\0\11\12\1\u0118\16\12"+
    "\1\0\1\12\26\0\2\12\3\0\12\12\1\u0119\15\12"+
    "\1\0\1\12\26\0\2\12\3\0\12\12\1\u011a\15\12"+
    "\1\0\1\12\26\0\2\12\3\0\6\12\1\266\21\12"+
    "\1\0\1\12\26\0\2\12\5\0\1\u011b\62\0\1\u011c"+
    "\5\0\1\u011d\62\0\1\u011e\71\0\1\u011f\57\0\1\343"+
    "\66\0\1\343\56\0\11\12\1\u0120\16\12\1\0\1\12"+
    "\26\0\2\12\3\0\16\12\1\55\11\12\1\0\1\12"+
    "\26\0\2\12\3\0\3\12\1\245\24\12\1\0\1\12"+
    "\26\0\2\12\11\0\1\u0121\104\0\1\u0122\40\0\1\u0123"+
    "\73\0\1\u0124\65\0\1\343\52\0\12\12\1\u0108\15\12"+
    "\1\0\1\12\26\0\2\12\6\0\1\u0125\106\0\1\u0126"+
    "\62\0\1\u0127\45\0\1\u0128\112\0\1\u0129\55\0\1\u012a"+
    "\52\0\1\u012b\75\0\1\u012c\75\0\1\u012d\42\0\1\u012e"+
    "\65\0\1\u012f\54\0\1\u0130\62\0\30\u012d\1\0\1\u012d"+
    "\2\0\1\u0131\21\0\1\u012d\1\0\2\u012d\5\0\1\u0132"+
    "\64\0\1\u0133\106\0\1\343\75\0\1\u0134\32\0\1\u0135"+
    "\67\0\1\u0136\103\0\1\u0137\64\0\1\u0138\54\0\1\u0139"+
    "\56\0\1\u013a\55\0\1\u013b\72\0\1\u013c\61\0\1\u013d"+
    "\61\0\1\u013e\64\0\1\343\101\0\1\u0102\46\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15158];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\32\1\1\11\4\1\1\11\2\1\2\11"+
    "\1\1\1\11\2\1\1\11\51\1\7\0\1\1\2\11"+
    "\1\0\1\11\1\0\2\11\1\0\50\1\17\0\36\1"+
    "\14\0\1\11\1\0\1\11\32\1\1\11\11\0\1\11"+
    "\17\1\11\0\12\1\6\0\5\1\5\0\1\1\23\0"+
    "\1\11\12\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[318];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
public String lexeme;
public int linea;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 188) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 34: 
          { {lexeme=yytext(); return SELEC;}
          }
        case 41: break;
        case 2: 
          { lexeme=yytext(); return ID;
          }
        case 42: break;
        case 12: 
          { lexeme=yytext(); return INT;
          }
        case 43: break;
        case 22: 
          { lexeme=yytext(); return COMPARACION;
          }
        case 44: break;
        case 19: 
          { lexeme=yytext(); return DIFERENTE;
          }
        case 45: break;
        case 36: 
          { {lexeme=yytext(); return INCLUI;}
          }
        case 46: break;
        case 40: 
          { lexeme=yytext(); return ACCDB;
          }
        case 47: break;
        case 39: 
          { {lexeme=yytext(); return FUN;}
          }
        case 48: break;
        case 26: 
          { {lexeme=yytext(); return ELS;}
          }
        case 49: break;
        case 15: 
          { lexeme=yytext(); return PALABRARESERVADA;
          }
        case 50: break;
        case 7: 
          { lexeme=yytext(); return PUNTOYCOMA;
          }
        case 51: break;
        case 16: 
          { lexeme=yytext(); return SI;
          }
        case 52: break;
        case 18: 
          { lexeme=yytext(); return COMMENT;
          }
        case 53: break;
        case 1: 
          { lexeme=yytext();linea = yyline; return ERROR;
          }
        case 54: break;
        case 25: 
          { lexeme=yytext(); return TIPODEDATOL;
          }
        case 55: break;
        case 28: 
          { {lexeme=yytext(); return BREA;}
          }
        case 56: break;
        case 8: 
          { lexeme=yytext(); return LLAVEA;
          }
        case 57: break;
        case 3: 
          { lexeme=yytext(); return VARIABLE;
          }
        case 58: break;
        case 17: 
          { {lexeme=yytext(); return HMIENTR;}
          }
        case 59: break;
        case 23: 
          { lexeme=yytext(); return ENT;
          }
        case 60: break;
        case 30: 
          { {lexeme=yytext(); return MIENTR;}
          }
        case 61: break;
        case 21: 
          { lexeme=yytext(); return FINPHP;
          }
        case 62: break;
        case 24: 
          { {lexeme=yytext(); return PARA;}
          }
        case 63: break;
        case 35: 
          { {lexeme=yytext(); return RET;}
          }
        case 64: break;
        case 38: 
          { {lexeme=yytext(); return CONTIN;}
          }
        case 65: break;
        case 37: 
          { {lexeme=yytext(); return PARAC;}
          }
        case 66: break;
        case 13: 
          { lexeme=yytext(); return PAA;
          }
        case 67: break;
        case 6: 
          { lexeme=yytext(); return COMILLA;
          }
        case 68: break;
        case 9: 
          { lexeme=yytext(); return LLAVEC;
          }
        case 69: break;
        case 27: 
          { lexeme=yytext(); return COMMENTM;
          }
        case 70: break;
        case 32: 
          { lexeme=yytext(); return INICIOPHP;
          }
        case 71: break;
        case 10: 
          { lexeme=yytext(); return ASIGNACION;
          }
        case 72: break;
        case 31: 
          { lexeme=yytext(); return VARPRE;
          }
        case 73: break;
        case 33: 
          { lexeme=yytext(); return CADENA;
          }
        case 74: break;
        case 4: 
          { lexeme=yytext(); return OPERADORARITMETICO;
          }
        case 75: break;
        case 11: 
          { /*Ignore*/
          }
        case 76: break;
        case 20: 
          { lexeme=yytext(); return TEXTO;
          }
        case 77: break;
        case 14: 
          { lexeme=yytext(); return PAC;
          }
        case 78: break;
        case 5: 
          { lexeme=yytext(); return OPERADORLOGICO;
          }
        case 79: break;
        case 29: 
          { lexeme=yytext(); return REA;
          }
        case 80: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
