/* The following code was generated by JFlex 1.4.3 on 4/1/18 5:17 PM */

package analizador;
import static analizador.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/1/18 5:17 PM from the specification file
 * <tt>C:/Users/Jose Mansilla/Documents/analizadorLexico-Java/src/analizador/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\54\1\54\2\0\1\54\22\0\1\53\1\37\2\0\1\44"+
    "\1\36\1\40\1\42\1\57\1\60\1\34\1\32\1\0\1\33\1\0"+
    "\1\35\12\56\1\0\1\43\1\45\1\52\1\47\1\46\1\0\1\1"+
    "\1\2\1\6\1\17\1\7\1\20\1\26\1\11\1\15\1\55\1\10"+
    "\1\12\1\24\1\14\1\13\1\25\1\31\1\5\1\3\1\4\1\16"+
    "\1\21\1\30\1\22\1\23\1\55\4\0\1\27\1\0\1\1\1\2"+
    "\1\6\1\17\1\7\1\20\1\26\1\11\1\15\1\55\1\10\1\12"+
    "\1\24\1\14\1\13\1\25\1\31\1\5\1\3\1\4\1\16\1\21"+
    "\1\30\1\22\1\23\1\55\1\50\1\41\1\51\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\25\2\5\3\1\4\2\1\1\5\1\6"+
    "\1\7\2\1\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\2\1\17\16\2\1\4\5\2\1\20\3\2"+
    "\1\17\13\2\1\0\1\21\1\22\1\4\1\0\1\23"+
    "\1\0\1\24\1\25\1\0\25\2\1\26\17\2\3\0"+
    "\4\2\1\27\25\2\1\30\1\0\1\14\21\2\1\31"+
    "\1\17\3\2\1\32\1\2\1\33\11\2\1\17\11\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[204];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae\0\u02df"+
    "\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436\0\u0467"+
    "\0\u0498\0\u04c9\0\u04fa\0\61\0\u052b\0\u055c\0\u058d\0\u05be"+
    "\0\61\0\61\0\u05ef\0\u0620\0\61\0\61\0\u0651\0\61"+
    "\0\u0682\0\u06b3\0\61\0\u06e4\0\u01b9\0\u0715\0\u0746\0\u0777"+
    "\0\u07a8\0\u07d9\0\u080a\0\u083b\0\u086c\0\u089d\0\u08ce\0\u08ff"+
    "\0\u0930\0\u0961\0\u0992\0\u01b9\0\u09c3\0\u09f4\0\u0a25\0\u0a56"+
    "\0\u0a87\0\u01b9\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b\0\u0b7c\0\u0bad"+
    "\0\u0bde\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2\0\u0cd3\0\u0d04\0\u0d35"+
    "\0\u0d66\0\u0d97\0\u0dc8\0\61\0\61\0\u05be\0\61\0\u0df9"+
    "\0\61\0\61\0\u0e2a\0\u0e5b\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f"+
    "\0\u0f50\0\u0f81\0\u0fb2\0\u0fe3\0\u1014\0\u1045\0\u1076\0\u10a7"+
    "\0\u10d8\0\u1109\0\u113a\0\u116b\0\u119c\0\u11cd\0\u11fe\0\u122f"+
    "\0\u1260\0\u1291\0\u12c2\0\u12f3\0\u1324\0\u1355\0\u1386\0\u13b7"+
    "\0\u13e8\0\u1419\0\u144a\0\u147b\0\u14ac\0\u14dd\0\u150e\0\u153f"+
    "\0\u1570\0\u15a1\0\u15d2\0\u1603\0\u1634\0\u1665\0\u1696\0\u01b9"+
    "\0\u16c7\0\u16f8\0\u1729\0\u175a\0\u178b\0\u17bc\0\u17ed\0\u181e"+
    "\0\u184f\0\u1880\0\u18b1\0\u18e2\0\u1913\0\u1944\0\u1975\0\u19a6"+
    "\0\u19d7\0\u1a08\0\u1a39\0\u1a6a\0\u1a9b\0\61\0\u1acc\0\61"+
    "\0\u1afd\0\u1b2e\0\u1b5f\0\u1b90\0\u1bc1\0\u1bf2\0\u1c23\0\u1c54"+
    "\0\u1c85\0\u1cb6\0\u1ce7\0\u1d18\0\u1d49\0\u1d7a\0\u1dab\0\u1ddc"+
    "\0\u1e0d\0\u01b9\0\u1e3e\0\u1e6f\0\u1ea0\0\u1ed1\0\61\0\u1f02"+
    "\0\u01b9\0\u1f33\0\u1f64\0\u1f95\0\u1fc6\0\u1ff7\0\u2028\0\u2059"+
    "\0\u208a\0\u20bb\0\u20ec\0\u211d\0\u214e\0\u217f\0\u21b0\0\u21e1"+
    "\0\u2212\0\u2243\0\u2274\0\u22a5";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[204];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\2\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\12\1\25\1\26\1\12\1\27"+
    "\1\12\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\2\1\45"+
    "\1\46\1\47\2\50\1\12\1\51\1\52\1\53\62\0"+
    "\1\12\1\54\1\55\10\12\1\56\15\12\23\0\2\12"+
    "\3\0\4\12\1\57\24\12\23\0\2\12\3\0\3\12"+
    "\1\60\25\12\23\0\2\12\3\0\4\12\1\61\3\12"+
    "\1\62\20\12\23\0\2\12\3\0\6\12\1\63\22\12"+
    "\23\0\2\12\3\0\1\64\10\12\1\65\1\66\16\12"+
    "\23\0\2\12\3\0\5\12\1\67\5\12\1\70\4\12"+
    "\1\71\1\72\7\12\23\0\2\12\3\0\31\12\23\0"+
    "\2\12\3\0\14\12\1\73\14\12\23\0\2\12\3\0"+
    "\4\12\1\74\24\12\23\0\2\12\3\0\1\75\5\12"+
    "\1\76\3\12\1\77\16\12\23\0\2\12\3\0\2\12"+
    "\1\100\10\12\1\101\3\12\1\102\3\12\1\103\5\12"+
    "\23\0\2\12\3\0\2\12\1\104\10\12\1\100\15\12"+
    "\23\0\2\12\3\0\6\12\1\105\3\12\1\106\1\12"+
    "\1\104\14\12\23\0\2\12\3\0\1\107\10\12\1\110"+
    "\2\12\1\111\1\112\13\12\23\0\2\12\3\0\1\113"+
    "\30\12\23\0\2\12\3\0\12\12\1\14\16\12\23\0"+
    "\2\12\3\0\14\12\1\114\14\12\23\0\2\12\3\0"+
    "\4\12\1\115\10\12\1\116\13\12\23\0\2\12\3\0"+
    "\11\12\1\117\1\120\16\12\23\0\2\12\3\0\10\12"+
    "\1\121\20\12\23\0\2\12\34\0\1\34\61\0\1\34"+
    "\61\0\1\34\60\0\1\122\1\123\75\0\1\124\46\0"+
    "\1\125\61\0\1\125\20\0\31\126\10\0\1\127\10\0"+
    "\1\126\1\0\2\126\50\0\1\130\61\0\1\131\63\0"+
    "\1\132\64\0\1\51\35\0\1\133\26\0\2\12\1\134"+
    "\26\12\23\0\2\12\3\0\16\12\1\74\12\12\23\0"+
    "\2\12\3\0\6\12\1\135\22\12\23\0\2\12\3\0"+
    "\1\136\3\12\1\137\24\12\23\0\2\12\3\0\1\140"+
    "\14\12\1\141\4\12\1\55\6\12\23\0\2\12\3\0"+
    "\4\12\1\142\24\12\23\0\2\12\3\0\3\12\1\143"+
    "\24\12\1\144\23\0\2\12\3\0\2\12\1\104\1\145"+
    "\25\12\23\0\2\12\3\0\1\146\11\12\1\147\16\12"+
    "\23\0\2\12\3\0\13\12\1\150\15\12\23\0\2\12"+
    "\3\0\10\12\1\151\20\12\23\0\2\12\3\0\16\12"+
    "\1\152\12\12\23\0\2\12\3\0\1\153\30\12\23\0"+
    "\2\12\3\0\3\12\1\154\10\12\1\155\14\12\23\0"+
    "\2\12\3\0\2\12\1\155\26\12\23\0\2\12\3\0"+
    "\23\12\1\156\5\12\23\0\2\12\3\0\27\12\1\55"+
    "\1\12\23\0\2\12\3\0\3\12\1\74\25\12\23\0"+
    "\2\12\3\0\2\12\1\157\26\12\23\0\2\12\3\0"+
    "\2\12\1\160\1\161\1\12\1\162\23\12\23\0\2\12"+
    "\3\0\24\12\1\163\4\12\23\0\2\12\3\0\6\12"+
    "\1\55\22\12\23\0\2\12\3\0\5\12\1\164\11\12"+
    "\1\165\11\12\23\0\2\12\3\0\15\12\1\166\13\12"+
    "\23\0\2\12\3\0\11\12\1\167\17\12\23\0\2\12"+
    "\3\0\12\12\1\170\16\12\23\0\2\12\3\0\13\12"+
    "\1\171\15\12\23\0\2\12\3\0\13\12\1\172\15\12"+
    "\23\0\2\12\3\0\4\12\1\55\24\12\23\0\2\12"+
    "\3\0\6\12\1\173\22\12\23\0\2\12\3\0\12\12"+
    "\1\174\1\12\1\175\14\12\23\0\2\12\3\0\1\12"+
    "\1\176\27\12\23\0\2\12\3\0\12\12\1\177\16\12"+
    "\23\0\2\12\3\0\3\12\1\151\25\12\23\0\2\12"+
    "\3\0\14\12\1\200\14\12\23\0\2\12\3\0\31\122"+
    "\2\0\1\201\16\0\4\122\3\0\31\123\21\0\1\123"+
    "\1\0\2\123\27\0\1\202\111\0\1\203\3\0\3\12"+
    "\1\204\25\12\23\0\2\12\3\0\1\205\30\12\23\0"+
    "\2\12\3\0\3\12\1\206\25\12\23\0\2\12\3\0"+
    "\14\12\1\207\14\12\23\0\2\12\3\0\14\12\1\155"+
    "\14\12\23\0\2\12\3\0\6\12\1\210\22\12\23\0"+
    "\2\12\3\0\12\12\1\76\16\12\23\0\2\12\3\0"+
    "\15\12\1\211\13\12\23\0\2\12\3\0\15\12\1\212"+
    "\13\12\23\0\2\12\3\0\5\12\1\213\23\12\23\0"+
    "\2\12\3\0\2\12\1\214\26\12\23\0\2\12\3\0"+
    "\13\12\1\104\15\12\23\0\2\12\3\0\2\12\1\155"+
    "\1\215\25\12\23\0\2\12\3\0\12\12\1\55\16\12"+
    "\23\0\2\12\3\0\16\12\1\216\12\12\23\0\2\12"+
    "\3\0\11\12\1\55\17\12\23\0\2\12\3\0\6\12"+
    "\1\217\22\12\23\0\2\12\3\0\3\12\1\55\25\12"+
    "\23\0\2\12\3\0\6\12\1\220\22\12\23\0\2\12"+
    "\3\0\6\12\1\155\22\12\23\0\2\12\3\0\3\12"+
    "\1\221\25\12\23\0\2\12\3\0\6\12\1\222\22\12"+
    "\23\0\2\12\3\0\11\12\1\223\17\12\23\0\2\12"+
    "\3\0\11\12\1\224\17\12\23\0\2\12\3\0\11\12"+
    "\1\225\17\12\23\0\2\12\3\0\1\226\30\12\23\0"+
    "\2\12\3\0\1\12\1\227\27\12\23\0\2\12\3\0"+
    "\2\12\1\141\26\12\23\0\2\12\3\0\1\230\30\12"+
    "\23\0\2\12\3\0\1\231\30\12\23\0\2\12\3\0"+
    "\5\12\1\232\23\12\23\0\2\12\3\0\11\12\1\233"+
    "\17\12\23\0\2\12\3\0\3\12\1\234\25\12\23\0"+
    "\2\12\3\0\13\12\1\155\4\12\1\235\10\12\23\0"+
    "\2\12\3\0\11\12\1\206\17\12\23\0\2\12\3\0"+
    "\1\12\1\71\27\12\23\0\2\12\3\0\11\12\1\104"+
    "\17\12\23\0\2\12\37\0\1\236\34\0\1\237\125\0"+
    "\1\203\1\0\1\240\1\0\4\12\1\241\24\12\23\0"+
    "\2\12\3\0\7\12\1\55\21\12\23\0\2\12\3\0"+
    "\14\12\1\242\14\12\23\0\2\12\3\0\13\12\1\243"+
    "\15\12\23\0\2\12\3\0\4\12\1\244\24\12\23\0"+
    "\2\12\3\0\14\12\1\245\14\12\23\0\2\12\3\0"+
    "\10\12\1\55\20\12\23\0\2\12\3\0\2\12\1\55"+
    "\26\12\23\0\2\12\3\0\14\12\1\246\14\12\23\0"+
    "\2\12\3\0\6\12\1\247\22\12\23\0\2\12\3\0"+
    "\13\12\1\250\15\12\23\0\2\12\3\0\2\12\1\251"+
    "\26\12\23\0\2\12\3\0\1\252\5\12\1\253\22\12"+
    "\23\0\2\12\3\0\4\12\1\254\24\12\23\0\2\12"+
    "\3\0\15\12\1\255\13\12\23\0\2\12\3\0\6\12"+
    "\1\256\22\12\23\0\2\12\3\0\1\257\30\12\23\0"+
    "\2\12\3\0\15\12\1\260\13\12\23\0\2\12\3\0"+
    "\11\12\1\261\17\12\23\0\2\12\3\0\3\12\1\262"+
    "\25\12\23\0\2\12\3\0\11\12\1\263\17\12\23\0"+
    "\2\12\3\0\3\12\1\264\25\12\23\0\2\12\3\0"+
    "\16\12\1\55\12\12\23\0\2\12\3\0\6\12\1\265"+
    "\22\12\23\0\2\12\3\0\1\266\30\12\23\0\2\12"+
    "\27\0\1\267\34\0\1\270\30\12\23\0\2\12\3\0"+
    "\5\12\1\55\23\12\23\0\2\12\3\0\25\12\1\271"+
    "\3\12\23\0\2\12\3\0\13\12\1\55\15\12\23\0"+
    "\2\12\3\0\4\12\1\272\24\12\23\0\2\12\3\0"+
    "\13\12\1\273\15\12\23\0\2\12\3\0\5\12\1\164"+
    "\23\12\23\0\2\12\3\0\16\12\1\214\12\12\23\0"+
    "\2\12\3\0\24\12\1\274\4\12\23\0\2\12\3\0"+
    "\13\12\1\275\15\12\23\0\2\12\3\0\1\276\30\12"+
    "\23\0\2\12\3\0\17\12\1\274\11\12\23\0\2\12"+
    "\3\0\16\12\1\272\12\12\23\0\2\12\3\0\23\12"+
    "\1\277\5\12\23\0\2\12\3\0\4\12\1\104\24\12"+
    "\23\0\2\12\3\0\11\12\1\155\17\12\23\0\2\12"+
    "\3\0\6\12\1\262\22\12\23\0\2\12\3\0\11\12"+
    "\1\300\17\12\23\0\2\12\3\0\14\12\1\301\14\12"+
    "\23\0\2\12\3\0\5\12\1\302\23\12\23\0\2\12"+
    "\3\0\3\12\1\104\25\12\23\0\2\12\3\0\5\12"+
    "\1\155\23\12\23\0\2\12\3\0\6\12\1\303\22\12"+
    "\23\0\2\12\3\0\15\12\1\104\13\12\23\0\2\12"+
    "\3\0\1\304\30\12\23\0\2\12\3\0\5\12\1\305"+
    "\23\12\23\0\2\12\3\0\16\12\1\306\12\12\23\0"+
    "\2\12\3\0\6\12\1\307\22\12\23\0\2\12\3\0"+
    "\22\12\1\55\6\12\23\0\2\12\3\0\12\12\1\244"+
    "\16\12\23\0\2\12\3\0\3\12\1\310\25\12\23\0"+
    "\2\12\3\0\26\12\1\311\2\12\23\0\2\12\3\0"+
    "\5\12\1\104\23\12\23\0\2\12\3\0\6\12\1\306"+
    "\22\12\23\0\2\12\3\0\12\12\1\312\16\12\23\0"+
    "\2\12\3\0\13\12\1\313\15\12\23\0\2\12\3\0"+
    "\6\12\1\233\22\12\23\0\2\12\3\0\12\12\1\314"+
    "\16\12\23\0\2\12\3\0\17\12\1\55\11\12\23\0"+
    "\2\12\3\0\3\12\1\214\25\12\23\0\2\12\3\0"+
    "\13\12\1\304\15\12\23\0\2\12\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8918];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\31\1\1\11\4\1\2\11\2\1\2\11"+
    "\1\1\1\11\2\1\1\11\46\1\1\0\1\1\2\11"+
    "\1\0\1\11\1\0\2\11\1\0\45\1\3\0\32\1"+
    "\1\11\1\0\1\11\26\1\1\11\25\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[204];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
public String lexeme;
public int linea;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 176) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 13: 
          { lexeme=yytext(); return PAA;
          }
        case 28: break;
        case 22: 
          { lexeme=yytext(); return ENT;
          }
        case 29: break;
        case 16: 
          { lexeme=yytext(); return SI;
          }
        case 30: break;
        case 8: 
          { lexeme=yytext(); return LLAVEA;
          }
        case 31: break;
        case 17: 
          { lexeme=yytext(); return COMMENT;
          }
        case 32: break;
        case 5: 
          { lexeme=yytext(); return COMILLA;
          }
        case 33: break;
        case 23: 
          { lexeme=yytext(); return TIPODEDATOL;
          }
        case 34: break;
        case 21: 
          { lexeme=yytext(); return COMPARACION;
          }
        case 35: break;
        case 4: 
          { lexeme=yytext(); return OPERADORLOGICO;
          }
        case 36: break;
        case 15: 
          { lexeme=yytext(); return PALABRARESERVADA;
          }
        case 37: break;
        case 20: 
          { lexeme=yytext(); return FINPHP;
          }
        case 38: break;
        case 25: 
          { lexeme=yytext(); return REA;
          }
        case 39: break;
        case 6: 
          { lexeme=yytext(); return PUNTOYCOMA;
          }
        case 40: break;
        case 27: 
          { lexeme=yytext(); return CADENA;
          }
        case 41: break;
        case 19: 
          { lexeme=yytext(); return TEXTO;
          }
        case 42: break;
        case 12: 
          { lexeme=yytext(); return INT;
          }
        case 43: break;
        case 14: 
          { lexeme=yytext(); return PAC;
          }
        case 44: break;
        case 7: 
          { lexeme=yytext(); return VARIABLE;
          }
        case 45: break;
        case 9: 
          { lexeme=yytext(); return LLAVEC;
          }
        case 46: break;
        case 11: 
          { /*Ignore*/
          }
        case 47: break;
        case 10: 
          { lexeme=yytext(); return ASIGNACION;
          }
        case 48: break;
        case 26: 
          { lexeme=yytext(); return INICIOPHP;
          }
        case 49: break;
        case 18: 
          { lexeme=yytext(); return DIFERENTE;
          }
        case 50: break;
        case 24: 
          { lexeme=yytext(); return COMMENTM;
          }
        case 51: break;
        case 3: 
          { lexeme=yytext(); return OPERADORARITMETICO;
          }
        case 52: break;
        case 2: 
          { lexeme=yytext(); return ID;
          }
        case 53: break;
        case 1: 
          { lexeme=yytext();linea = yyline; return ERROR;
          }
        case 54: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
