/* The following code was generated by JFlex 1.4.3 on 4/6/18 9:16 AM */

package analizador;
import static analizador.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/6/18 9:16 AM from the specification file
 * <tt>C:/Users/Jose Mansilla/Documents/2018/Universidad/Primer ciclo/Lenguajes formales y automatas/Proyecto_1_AnalizadorLexico/analizadorLexico-Java/src/analizador/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\73\1\2\2\0\1\1\22\0\1\60\1\46\1\52\1\5"+
    "\1\36\1\45\1\47\1\41\1\56\1\57\1\4\1\43\1\53\1\44"+
    "\1\51\1\3\11\75\1\76\1\70\1\71\1\64\1\67\1\65\1\66"+
    "\1\55\1\14\1\16\1\13\1\25\1\6\1\26\1\32\1\23\1\27"+
    "\1\74\1\37\1\15\1\7\1\17\1\24\1\10\1\35\1\22\1\21"+
    "\1\11\1\20\1\30\1\34\1\31\1\12\1\74\1\40\1\63\1\42"+
    "\1\45\1\33\1\72\1\14\1\16\1\13\1\25\1\6\1\26\1\32"+
    "\1\23\1\27\1\74\1\37\1\15\1\7\1\17\1\24\1\10\1\35"+
    "\1\22\1\21\1\11\1\20\1\30\1\34\1\31\1\12\1\74\1\61"+
    "\1\50\1\62\1\54\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\4\26\5\1\6\1\7"+
    "\1\10\1\11\3\3\3\12\1\13\1\10\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\10\2\31\1\4\1\6\1\26"+
    "\1\4\20\5\1\32\14\5\1\12\1\5\1\33\7\5"+
    "\1\34\13\5\1\35\2\0\1\36\2\0\1\37\1\12"+
    "\1\0\1\36\3\0\1\40\1\0\1\41\1\42\1\35"+
    "\2\4\1\0\1\6\1\0\1\6\43\5\1\43\2\5"+
    "\1\44\26\5\7\0\1\6\1\2\1\0\1\4\1\6"+
    "\1\5\1\45\5\5\1\46\10\5\1\47\45\5\3\0"+
    "\1\6\1\31\1\0\7\5\1\50\1\5\1\51\12\5"+
    "\1\52\2\5\1\32\14\5\1\53\1\5\1\54\10\5"+
    "\1\55\1\56\6\5\1\57\1\60\1\61\30\5\1\47"+
    "\1\5\1\32\1\5\1\62\1\5\1\63\4\5\1\64"+
    "\10\5\1\65\1\5\1\66\21\5\1\67\24\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[411];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\77\0\176\0\275\0\374\0\u013b\0\u017a"+
    "\0\u01b9\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u0333\0\u0372"+
    "\0\u03b1\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec\0\u052b\0\u056a"+
    "\0\u05a9\0\u05e8\0\u0627\0\u0666\0\u06a5\0\u06e4\0\u0723\0\77"+
    "\0\u0762\0\u07a1\0\77\0\u07e0\0\u081f\0\u085e\0\u089d\0\u08dc"+
    "\0\77\0\77\0\u091b\0\77\0\77\0\77\0\77\0\u095a"+
    "\0\77\0\u0999\0\u09d8\0\77\0\77\0\77\0\u0a17\0\u0a56"+
    "\0\u0a95\0\u0ad4\0\77\0\u0b13\0\u0b52\0\u0b91\0\u0bd0\0\u0c0f"+
    "\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b\0\u0d4a\0\u0d89\0\u0dc8\0\u0e07"+
    "\0\u0e46\0\u0e85\0\u0ec4\0\u0f03\0\u017a\0\u0f42\0\u0f81\0\u0fc0"+
    "\0\u0fff\0\u103e\0\u107d\0\u10bc\0\u10fb\0\u113a\0\u1179\0\u11b8"+
    "\0\u11f7\0\u017a\0\u1236\0\u1275\0\u12b4\0\u12f3\0\u1332\0\u1371"+
    "\0\u13b0\0\u13ef\0\u142e\0\u017a\0\u146d\0\u14ac\0\u14eb\0\u152a"+
    "\0\u1569\0\u15a8\0\u15e7\0\u1626\0\u1665\0\u16a4\0\u16e3\0\u1722"+
    "\0\u1761\0\u0723\0\u0723\0\u17a0\0\u17df\0\77\0\77\0\u08dc"+
    "\0\77\0\u181e\0\u185d\0\u189c\0\77\0\u18db\0\77\0\u191a"+
    "\0\u1959\0\u1998\0\77\0\u19d7\0\u1a16\0\u1a55\0\u1a94\0\u1ad3"+
    "\0\u1b12\0\u1b51\0\u1b90\0\u1bcf\0\u1c0e\0\u1c4d\0\u1c8c\0\u1ccb"+
    "\0\u1d0a\0\u1d49\0\u1d88\0\u1dc7\0\u1e06\0\u1e45\0\u1e84\0\u1ec3"+
    "\0\u1f02\0\u1f41\0\u1f80\0\u1fbf\0\u1ffe\0\u203d\0\u207c\0\u20bb"+
    "\0\u20fa\0\u2139\0\u2178\0\u21b7\0\u21f6\0\u2235\0\u2274\0\u22b3"+
    "\0\u22f2\0\u2331\0\u2370\0\u23af\0\u23ee\0\u242d\0\u246c\0\u24ab"+
    "\0\u24ea\0\u2529\0\u2568\0\u25a7\0\u25e6\0\u2625\0\u2664\0\u26a3"+
    "\0\u26e2\0\u2721\0\u2760\0\u279f\0\u27de\0\u281d\0\u285c\0\u289b"+
    "\0\u28da\0\u2919\0\u2958\0\u2997\0\u29d6\0\u2a15\0\u2a54\0\u2a93"+
    "\0\u2ad2\0\u2b11\0\u2b50\0\77\0\u1722\0\u2b8f\0\u19d7\0\u2bce"+
    "\0\u2c0d\0\u017a\0\u2c4c\0\u2c8b\0\u2cca\0\u2d09\0\u2d48\0\u017a"+
    "\0\u2d87\0\u2dc6\0\u2e05\0\u2e44\0\u2e83\0\u2ec2\0\u2f01\0\u2f40"+
    "\0\u2f7f\0\u2fbe\0\u2ffd\0\u303c\0\u307b\0\u30ba\0\u30f9\0\u3138"+
    "\0\u3177\0\u31b6\0\u31f5\0\u3234\0\u3273\0\u32b2\0\u32f1\0\u3330"+
    "\0\u336f\0\u33ae\0\u33ed\0\u342c\0\u346b\0\u34aa\0\u34e9\0\u3528"+
    "\0\u3567\0\u35a6\0\u35e5\0\u3624\0\u3663\0\u36a2\0\u36e1\0\u3720"+
    "\0\u375f\0\u379e\0\u37dd\0\u381c\0\u385b\0\u389a\0\u38d9\0\u3918"+
    "\0\u3957\0\u29d6\0\77\0\u3996\0\u39d5\0\u3a14\0\u3a53\0\u3a92"+
    "\0\u3ad1\0\u3b10\0\u3b4f\0\u017a\0\u3b8e\0\u017a\0\u3bcd\0\u3c0c"+
    "\0\u3c4b\0\u3c8a\0\u3cc9\0\u3d08\0\u3d47\0\u3d86\0\u3dc5\0\u3e04"+
    "\0\u017a\0\u3e43\0\u3e82\0\u3ec1\0\u3f00\0\u3f3f\0\u3f7e\0\u3fbd"+
    "\0\u3ffc\0\u403b\0\u407a\0\u40b9\0\u40f8\0\u4137\0\u4176\0\u41b5"+
    "\0\u017a\0\u41f4\0\u017a\0\u4233\0\u4272\0\u42b1\0\u42f0\0\u432f"+
    "\0\u436e\0\u43ad\0\u43ec\0\u29d6\0\77\0\u442b\0\u446a\0\u44a9"+
    "\0\u44e8\0\u4527\0\u4566\0\u017a\0\u017a\0\u017a\0\u45a5\0\u45e4"+
    "\0\u4623\0\u4662\0\u46a1\0\u46e0\0\u471f\0\u475e\0\u479d\0\u47dc"+
    "\0\u481b\0\u485a\0\u4899\0\u48d8\0\u4917\0\u4956\0\u4995\0\u49d4"+
    "\0\u4a13\0\u4a52\0\u4a91\0\u4ad0\0\u4b0f\0\u4b4e\0\u017a\0\u4b8d"+
    "\0\u4bcc\0\u4c0b\0\u017a\0\u4c4a\0\u4bcc\0\u4c89\0\u4cc8\0\u4d07"+
    "\0\u4d46\0\u017a\0\u4d85\0\u4dc4\0\u4e03\0\u4e42\0\u4e81\0\u4ec0"+
    "\0\u4eff\0\u4f3e\0\u017a\0\u4f7d\0\u017a\0\u4fbc\0\u4ffb\0\u503a"+
    "\0\u5079\0\u50b8\0\u50f7\0\u5136\0\u5175\0\u51b4\0\u51f3\0\u5232"+
    "\0\u5271\0\u52b0\0\u52ef\0\u532e\0\u536d\0\u53ac\0\u017a\0\u53eb"+
    "\0\u542a\0\u5469\0\u54a8\0\u54e7\0\u5526\0\u5565\0\u55a4\0\u55e3"+
    "\0\u5622\0\u5661\0\u56a0\0\u56df\0\u571e\0\u575d\0\u579c\0\u57db"+
    "\0\u581a\0\u5859\0\u5898";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[411];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\10\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\10\1\35\1\10\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\2\1\52\1\53\1\54\1\3"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\3\1\10\1\67\1\70\102\0\1\71"+
    "\1\72\62\0\1\73\13\0\1\43\75\0\47\6\1\0"+
    "\5\6\1\74\1\0\10\6\2\0\3\6\6\0\1\10"+
    "\1\75\3\10\1\76\1\10\1\77\1\10\1\100\10\10"+
    "\1\101\1\102\4\10\1\0\1\10\34\0\3\10\6\0"+
    "\30\10\1\0\1\10\34\0\3\10\6\0\12\10\1\103"+
    "\1\10\1\104\13\10\1\0\1\10\34\0\3\10\6\0"+
    "\14\10\1\105\1\106\12\10\1\0\1\10\34\0\3\10"+
    "\6\0\21\10\1\107\6\10\1\0\1\10\34\0\3\10"+
    "\6\0\6\10\1\110\1\111\6\10\1\112\11\10\1\0"+
    "\1\10\34\0\3\10\6\0\10\10\1\113\1\114\1\10"+
    "\1\115\14\10\1\0\1\10\34\0\3\10\6\0\21\10"+
    "\1\116\6\10\1\0\1\10\34\0\3\10\6\0\14\10"+
    "\1\117\1\10\1\120\11\10\1\0\1\10\34\0\3\10"+
    "\6\0\1\121\5\10\1\122\3\10\1\123\3\10\1\124"+
    "\11\10\1\0\1\10\34\0\3\10\6\0\11\10\1\125"+
    "\1\10\1\126\14\10\1\0\1\10\34\0\3\10\6\0"+
    "\3\10\1\127\22\10\1\130\1\10\1\0\1\10\34\0"+
    "\3\10\6\0\1\131\27\10\1\0\1\10\34\0\3\10"+
    "\6\0\14\10\1\132\13\10\1\0\1\10\34\0\3\10"+
    "\6\0\1\133\15\10\1\134\2\10\1\126\6\10\1\0"+
    "\1\10\34\0\3\10\6\0\6\10\1\135\1\136\2\10"+
    "\1\137\3\10\1\140\2\10\1\141\6\10\1\0\1\10"+
    "\34\0\3\10\6\0\1\10\1\142\7\10\1\143\1\10"+
    "\1\125\4\10\1\144\7\10\1\0\1\10\34\0\3\10"+
    "\6\0\6\10\1\145\21\10\1\0\1\10\34\0\3\10"+
    "\6\0\16\10\1\24\11\10\1\0\1\10\34\0\3\10"+
    "\6\0\7\10\1\146\6\10\1\147\11\10\1\0\1\10"+
    "\34\0\3\10\6\0\25\10\1\150\2\10\1\0\1\10"+
    "\34\0\3\10\6\0\15\10\1\151\12\10\1\0\1\10"+
    "\34\0\3\10\6\0\2\10\1\152\3\10\1\153\5\10"+
    "\1\154\1\155\6\10\1\156\1\157\2\10\1\0\1\10"+
    "\34\0\1\10\2\160\41\0\1\161\40\0\36\162\1\163"+
    "\10\162\1\0\5\162\1\164\1\0\10\162\2\0\3\162"+
    "\43\0\1\43\77\0\1\43\30\0\2\165\67\0\1\166"+
    "\56\0\1\167\17\0\1\73\57\0\1\167\115\0\1\73"+
    "\12\0\47\170\1\171\5\170\1\172\1\0\10\170\2\0"+
    "\3\170\44\0\1\173\120\0\1\174\75\0\1\175\57\0"+
    "\1\176\16\0\1\73\1\0\1\177\15\0\30\160\1\0"+
    "\1\160\11\0\1\200\22\0\1\160\2\67\6\0\2\160"+
    "\1\201\25\160\1\0\1\160\11\0\1\200\22\0\1\160"+
    "\2\67\1\71\1\202\1\203\74\71\1\204\2\205\1\204"+
    "\1\206\1\204\30\207\1\204\1\207\20\204\1\205\12\204"+
    "\1\205\3\207\3\0\47\6\1\0\5\6\1\74\11\6"+
    "\2\0\3\6\6\0\2\10\1\210\25\10\1\0\1\10"+
    "\34\0\3\10\6\0\15\10\1\211\12\10\1\0\1\10"+
    "\34\0\3\10\6\0\13\10\1\212\14\10\1\0\1\10"+
    "\34\0\3\10\6\0\17\10\1\213\10\10\1\0\1\10"+
    "\34\0\3\10\6\0\6\10\1\214\21\10\1\0\1\10"+
    "\34\0\3\10\6\0\3\10\1\215\15\10\1\216\6\10"+
    "\1\0\1\10\34\0\3\10\6\0\10\10\1\217\17\10"+
    "\1\0\1\10\34\0\3\10\6\0\16\10\1\220\2\10"+
    "\1\221\6\10\1\0\1\10\34\0\3\10\6\0\4\10"+
    "\1\115\1\10\1\222\3\10\1\223\15\10\1\0\1\10"+
    "\34\0\3\10\6\0\14\10\1\224\13\10\1\0\1\10"+
    "\34\0\3\10\6\0\1\225\27\10\1\0\1\10\34\0"+
    "\3\10\6\0\3\10\1\226\3\10\1\227\3\10\1\126"+
    "\14\10\1\0\1\10\34\0\3\10\6\0\6\10\1\230"+
    "\7\10\1\231\11\10\1\0\1\10\34\0\3\10\6\0"+
    "\11\10\1\232\16\10\1\0\1\10\34\0\3\10\6\0"+
    "\13\10\1\233\14\10\1\0\1\10\34\0\3\10\6\0"+
    "\17\10\1\132\10\10\1\0\1\10\34\0\3\10\6\0"+
    "\13\10\1\216\14\10\1\0\1\10\34\0\3\10\6\0"+
    "\1\234\27\10\1\0\1\10\34\0\3\10\6\0\16\10"+
    "\1\235\11\10\1\0\1\10\34\0\3\10\6\0\26\10"+
    "\1\115\1\10\1\0\1\10\34\0\3\10\6\0\1\10"+
    "\1\236\26\10\1\0\1\10\34\0\3\10\6\0\7\10"+
    "\1\214\20\10\1\0\1\10\34\0\3\10\6\0\3\10"+
    "\1\132\24\10\1\0\1\10\34\0\3\10\6\0\13\10"+
    "\1\237\14\10\1\0\1\10\34\0\3\10\6\0\1\115"+
    "\27\10\1\0\1\10\34\0\3\10\6\0\6\10\1\240"+
    "\5\10\1\241\13\10\1\0\1\10\34\0\3\10\6\0"+
    "\21\10\1\242\6\10\1\0\1\10\34\0\3\10\6\0"+
    "\3\10\1\243\23\10\1\244\1\0\1\10\34\0\3\10"+
    "\6\0\5\10\1\245\12\10\1\246\7\10\1\0\1\10"+
    "\34\0\3\10\6\0\12\10\1\247\15\10\1\0\1\10"+
    "\34\0\3\10\6\0\7\10\1\250\20\10\1\0\1\10"+
    "\34\0\3\10\6\0\16\10\1\251\11\10\1\0\1\10"+
    "\34\0\3\10\6\0\11\10\1\252\16\10\1\0\1\10"+
    "\34\0\3\10\6\0\14\10\1\253\13\10\1\0\1\10"+
    "\34\0\3\10\6\0\11\10\1\254\16\10\1\0\1\10"+
    "\34\0\3\10\6\0\2\10\1\255\25\10\1\0\1\10"+
    "\34\0\3\10\6\0\3\10\1\256\1\10\1\257\5\10"+
    "\1\260\14\10\1\0\1\10\34\0\3\10\6\0\14\10"+
    "\1\115\13\10\1\0\1\10\34\0\3\10\6\0\16\10"+
    "\1\261\11\10\1\0\1\10\34\0\3\10\6\0\3\10"+
    "\1\211\24\10\1\0\1\10\34\0\3\10\6\0\1\10"+
    "\1\262\1\10\1\263\1\10\1\264\1\10\1\265\1\10"+
    "\1\266\5\10\1\267\1\270\7\10\1\0\1\10\34\0"+
    "\3\10\6\0\21\10\1\271\6\10\1\0\1\10\34\0"+
    "\3\10\6\0\15\10\1\272\12\10\1\0\1\10\34\0"+
    "\3\10\6\0\14\10\1\273\13\10\1\0\1\10\34\0"+
    "\3\10\6\0\1\274\27\10\1\0\1\10\34\0\3\10"+
    "\6\0\3\10\1\275\24\10\1\0\1\10\34\0\3\10"+
    "\6\0\7\10\1\276\20\10\1\0\1\10\34\0\3\10"+
    "\6\0\1\277\4\10\1\300\5\10\1\301\1\302\3\10"+
    "\1\303\3\10\1\304\3\10\1\0\1\10\34\0\3\10"+
    "\6\0\30\160\1\0\1\160\34\0\3\160\3\0\3\305"+
    "\30\306\1\307\1\306\1\305\1\310\10\305\1\0\5\305"+
    "\1\311\1\0\10\305\2\0\1\306\2\305\3\0\36\162"+
    "\1\163\10\162\1\0\5\162\1\164\11\162\2\0\3\162"+
    "\51\0\1\200\23\0\2\165\3\0\47\170\1\171\5\170"+
    "\1\172\11\170\2\0\3\170\75\0\2\312\10\0\1\313"+
    "\155\0\1\314\104\0\2\200\6\0\3\160\1\315\24\160"+
    "\1\0\1\160\34\0\3\160\2\0\1\203\74\0\4\204"+
    "\1\316\73\204\2\205\1\204\1\316\1\204\30\207\1\204"+
    "\1\207\20\204\1\205\12\204\1\205\3\207\3\204\1\317"+
    "\1\316\73\204\2\320\1\204\1\316\1\204\30\207\1\204"+
    "\1\207\20\204\1\320\12\204\1\320\3\207\6\0\3\10"+
    "\1\321\24\10\1\0\1\10\34\0\3\10\6\0\16\10"+
    "\1\115\11\10\1\0\1\10\34\0\3\10\6\0\1\322"+
    "\27\10\1\0\1\10\34\0\3\10\6\0\17\10\1\323"+
    "\10\10\1\0\1\10\34\0\3\10\6\0\7\10\1\115"+
    "\20\10\1\0\1\10\34\0\3\10\6\0\1\324\27\10"+
    "\1\0\1\10\34\0\3\10\6\0\3\10\1\115\24\10"+
    "\1\0\1\10\34\0\3\10\6\0\7\10\1\325\20\10"+
    "\1\0\1\10\34\0\3\10\6\0\3\10\1\326\24\10"+
    "\1\0\1\10\34\0\3\10\6\0\11\10\1\216\10\10"+
    "\1\327\5\10\1\0\1\10\34\0\3\10\6\0\21\10"+
    "\1\216\6\10\1\0\1\10\34\0\3\10\6\0\1\330"+
    "\27\10\1\0\1\10\34\0\3\10\6\0\16\10\1\121"+
    "\11\10\1\0\1\10\34\0\3\10\6\0\7\10\1\331"+
    "\20\10\1\0\1\10\34\0\3\10\6\0\5\10\1\332"+
    "\22\10\1\0\1\10\34\0\3\10\6\0\7\10\1\333"+
    "\20\10\1\0\1\10\34\0\3\10\6\0\13\10\1\334"+
    "\14\10\1\0\1\10\34\0\3\10\6\0\11\10\1\126"+
    "\16\10\1\0\1\10\34\0\3\10\6\0\3\10\1\335"+
    "\7\10\1\336\14\10\1\0\1\10\34\0\3\10\6\0"+
    "\3\10\1\337\24\10\1\0\1\10\34\0\3\10\6\0"+
    "\6\10\1\340\21\10\1\0\1\10\34\0\3\10\6\0"+
    "\7\10\1\341\20\10\1\0\1\10\34\0\3\10\6\0"+
    "\1\342\27\10\1\0\1\10\34\0\3\10\6\0\1\216"+
    "\27\10\1\0\1\10\34\0\3\10\6\0\3\10\1\325"+
    "\24\10\1\0\1\10\34\0\3\10\6\0\21\10\1\343"+
    "\6\10\1\0\1\10\34\0\3\10\6\0\3\10\1\344"+
    "\24\10\1\0\1\10\34\0\3\10\6\0\12\10\1\345"+
    "\15\10\1\0\1\10\34\0\3\10\6\0\12\10\1\346"+
    "\15\10\1\0\1\10\34\0\3\10\6\0\7\10\1\347"+
    "\20\10\1\0\1\10\34\0\3\10\6\0\6\10\1\350"+
    "\12\10\1\351\6\10\1\0\1\10\34\0\3\10\6\0"+
    "\10\10\1\352\17\10\1\0\1\10\34\0\3\10\6\0"+
    "\13\10\1\223\14\10\1\0\1\10\34\0\3\10\6\0"+
    "\6\10\1\353\21\10\1\0\1\10\34\0\3\10\6\0"+
    "\5\10\1\354\22\10\1\0\1\10\34\0\3\10\6\0"+
    "\1\355\27\10\1\0\1\10\34\0\3\10\6\0\6\10"+
    "\1\356\21\10\1\0\1\10\34\0\3\10\6\0\7\10"+
    "\1\357\20\10\1\0\1\10\34\0\3\10\6\0\1\360"+
    "\27\10\1\0\1\10\34\0\3\10\6\0\7\10\1\361"+
    "\20\10\1\0\1\10\34\0\3\10\6\0\3\10\1\362"+
    "\24\10\1\0\1\10\34\0\3\10\6\0\10\10\1\101"+
    "\17\10\1\0\1\10\34\0\3\10\6\0\1\363\27\10"+
    "\1\0\1\10\34\0\3\10\6\0\14\10\1\364\13\10"+
    "\1\0\1\10\34\0\3\10\6\0\7\10\1\365\20\10"+
    "\1\0\1\10\34\0\3\10\6\0\21\10\1\366\6\10"+
    "\1\0\1\10\34\0\3\10\6\0\6\10\1\367\21\10"+
    "\1\0\1\10\34\0\3\10\6\0\21\10\1\370\6\10"+
    "\1\0\1\10\34\0\3\10\6\0\12\10\1\371\6\10"+
    "\1\372\6\10\1\0\1\10\34\0\3\10\6\0\7\10"+
    "\1\373\20\10\1\0\1\10\34\0\3\10\6\0\2\10"+
    "\1\374\25\10\1\0\1\10\34\0\3\10\6\0\24\10"+
    "\1\375\3\10\1\0\1\10\34\0\3\10\6\0\5\10"+
    "\1\376\22\10\1\0\1\10\34\0\3\10\6\0\3\10"+
    "\1\377\24\10\1\0\1\10\34\0\3\10\6\0\16\10"+
    "\1\u0100\11\10\1\0\1\10\34\0\3\10\6\0\11\10"+
    "\1\u0101\16\10\1\0\1\10\34\0\3\10\6\0\16\10"+
    "\1\u0102\11\10\1\0\1\10\34\0\3\10\6\0\1\u0103"+
    "\27\10\1\0\1\10\34\0\3\10\6\0\1\u0104\27\10"+
    "\1\0\1\10\34\0\3\10\6\0\21\10\1\u0105\6\10"+
    "\1\0\1\10\34\0\3\10\6\0\1\u0106\27\10\1\0"+
    "\1\10\34\0\3\10\3\0\36\305\1\310\10\305\1\0"+
    "\5\305\1\u0107\1\0\10\305\2\0\3\305\3\0\3\305"+
    "\30\306\1\305\1\306\1\305\1\u0108\10\305\1\0\5\305"+
    "\1\u0109\1\0\10\305\2\0\3\306\3\0\3\305\30\306"+
    "\1\305\1\306\1\305\1\310\10\305\1\0\5\305\1\u0107"+
    "\1\0\10\305\2\0\1\306\2\305\3\0\36\305\1\310"+
    "\1\u010a\7\305\1\0\5\305\1\u0107\1\0\10\305\2\0"+
    "\3\305\3\0\3\305\30\306\1\307\1\306\1\305\1\310"+
    "\10\305\1\0\5\305\1\311\11\305\2\0\1\306\2\305"+
    "\57\0\1\u010b\15\0\2\312\23\0\1\u010c\53\0\3\204"+
    "\1\203\1\316\73\204\2\320\1\204\1\316\53\204\1\320"+
    "\12\204\1\320\3\204\6\0\4\10\1\115\23\10\1\0"+
    "\1\10\34\0\3\10\6\0\1\u010d\27\10\1\0\1\10"+
    "\34\0\3\10\6\0\11\10\1\u010e\16\10\1\0\1\10"+
    "\34\0\3\10\6\0\21\10\1\u010f\6\10\1\0\1\10"+
    "\34\0\3\10\6\0\1\u0110\27\10\1\0\1\10\34\0"+
    "\3\10\6\0\6\10\1\u0111\21\10\1\0\1\10\34\0"+
    "\3\10\6\0\17\10\1\115\10\10\1\0\1\10\34\0"+
    "\3\10\6\0\15\10\1\115\12\10\1\0\1\10\34\0"+
    "\3\10\6\0\6\10\1\u0112\21\10\1\0\1\10\34\0"+
    "\3\10\6\0\13\10\1\115\14\10\1\0\1\10\34\0"+
    "\3\10\6\0\21\10\1\u0113\6\10\1\0\1\10\34\0"+
    "\3\10\6\0\3\10\1\u0114\24\10\1\0\1\10\34\0"+
    "\3\10\6\0\14\10\1\u0115\13\10\1\0\1\10\34\0"+
    "\3\10\6\0\30\10\1\0\1\u0116\34\0\3\10\6\0"+
    "\1\u0117\27\10\1\0\1\10\34\0\3\10\6\0\13\10"+
    "\1\u0118\14\10\1\0\1\10\34\0\3\10\6\0\11\10"+
    "\1\u0119\16\10\1\0\1\10\34\0\3\10\6\0\5\10"+
    "\1\u011a\22\10\1\0\1\10\34\0\3\10\6\0\14\10"+
    "\1\u011b\13\10\1\0\1\10\34\0\3\10\6\0\21\10"+
    "\1\u011c\6\10\1\0\1\10\34\0\3\10\6\0\6\10"+
    "\1\u011d\21\10\1\0\1\10\34\0\3\10\6\0\12\10"+
    "\1\u011e\15\10\1\0\1\10\34\0\3\10\6\0\11\10"+
    "\1\u011f\16\10\1\0\1\10\34\0\3\10\6\0\7\10"+
    "\1\u0120\20\10\1\0\1\10\34\0\3\10\6\0\3\10"+
    "\1\u0121\24\10\1\0\1\10\34\0\3\10\6\0\3\10"+
    "\1\u0122\24\10\1\0\1\10\34\0\3\10\6\0\6\10"+
    "\1\u0123\21\10\1\0\1\10\34\0\3\10\6\0\7\10"+
    "\1\u0124\20\10\1\0\1\10\34\0\3\10\6\0\1\u0125"+
    "\27\10\1\0\1\10\34\0\3\10\6\0\14\10\1\u0126"+
    "\13\10\1\0\1\10\34\0\3\10\6\0\12\10\1\u0127"+
    "\15\10\1\0\1\10\34\0\3\10\6\0\1\u0128\5\10"+
    "\1\u0129\21\10\1\0\1\10\34\0\3\10\6\0\3\10"+
    "\1\u012a\24\10\1\0\1\10\34\0\3\10\6\0\6\10"+
    "\1\u012b\21\10\1\0\1\10\34\0\3\10\6\0\6\10"+
    "\1\u012c\21\10\1\0\1\10\34\0\3\10\6\0\11\10"+
    "\1\u012d\16\10\1\0\1\10\34\0\3\10\6\0\1\10"+
    "\1\u012e\26\10\1\0\1\10\34\0\3\10\6\0\14\10"+
    "\1\u012f\13\10\1\0\1\10\34\0\3\10\6\0\11\10"+
    "\1\u0130\16\10\1\0\1\10\34\0\3\10\6\0\7\10"+
    "\1\u012d\20\10\1\0\1\10\34\0\3\10\6\0\1\u0131"+
    "\27\10\1\0\1\10\34\0\3\10\6\0\25\10\1\u0132"+
    "\2\10\1\0\1\10\34\0\3\10\6\0\5\10\1\u0133"+
    "\14\10\1\u0133\5\10\1\0\1\10\34\0\3\10\6\0"+
    "\16\10\1\u0134\11\10\1\0\1\10\34\0\3\10\6\0"+
    "\2\10\1\u0135\25\10\1\0\1\10\34\0\3\10\6\0"+
    "\10\10\1\u0136\17\10\1\0\1\10\34\0\3\10\6\0"+
    "\22\10\1\u0133\5\10\1\0\1\10\34\0\3\10\6\0"+
    "\16\10\1\u0137\11\10\1\0\1\10\34\0\3\10\6\0"+
    "\13\10\1\u0138\1\u0139\13\10\1\0\1\10\34\0\3\10"+
    "\6\0\27\10\1\u013a\1\0\1\10\34\0\3\10\6\0"+
    "\7\10\1\u013b\20\10\1\0\1\10\34\0\3\10\6\0"+
    "\3\10\1\u0133\24\10\1\0\1\10\34\0\3\10\3\0"+
    "\36\305\1\310\10\305\1\0\5\305\1\u0107\11\305\2\0"+
    "\3\305\3\0\36\305\1\310\1\u013c\7\305\1\0\5\305"+
    "\1\u0107\1\0\10\305\2\0\3\305\3\0\36\305\1\u0108"+
    "\10\305\1\0\5\305\1\u0109\11\305\2\0\3\305\10\0"+
    "\1\u013d\74\0\5\10\1\245\22\10\1\0\1\10\34\0"+
    "\3\10\6\0\17\10\1\334\10\10\1\0\1\10\34\0"+
    "\3\10\6\0\5\10\1\115\22\10\1\0\1\10\34\0"+
    "\3\10\6\0\5\10\1\u013e\22\10\1\0\1\10\34\0"+
    "\3\10\6\0\3\10\1\126\24\10\1\0\1\10\34\0"+
    "\3\10\6\0\10\10\1\u013f\17\10\1\0\1\10\34\0"+
    "\3\10\6\0\11\10\1\u0140\16\10\1\0\1\10\34\0"+
    "\3\10\6\0\6\10\1\u0141\21\10\1\0\1\10\34\0"+
    "\3\10\6\0\6\10\1\u0142\21\10\1\0\1\10\34\0"+
    "\3\10\6\0\2\10\1\u0143\25\10\1\0\1\10\34\0"+
    "\3\10\6\0\24\10\1\u0144\3\10\1\0\1\10\34\0"+
    "\3\10\6\0\15\10\1\u0145\12\10\1\0\1\10\34\0"+
    "\3\10\6\0\11\10\1\u0146\16\10\1\0\1\10\34\0"+
    "\3\10\6\0\14\10\1\u0147\13\10\1\0\1\10\34\0"+
    "\3\10\6\0\14\10\1\126\13\10\1\0\1\10\34\0"+
    "\3\10\6\0\7\10\1\216\20\10\1\0\1\10\34\0"+
    "\3\10\6\0\1\u0114\27\10\1\0\1\10\34\0\3\10"+
    "\6\0\1\u0121\27\10\1\0\1\10\34\0\3\10\6\0"+
    "\21\10\1\u0148\6\10\1\0\1\10\34\0\3\10\6\0"+
    "\5\10\1\u0149\22\10\1\0\1\10\34\0\3\10\6\0"+
    "\7\10\1\321\20\10\1\0\1\10\34\0\3\10\6\0"+
    "\1\10\1\u014a\26\10\1\0\1\10\34\0\3\10\6\0"+
    "\20\10\1\u0143\7\10\1\0\1\10\34\0\3\10\6\0"+
    "\17\10\1\u014b\10\10\1\0\1\10\34\0\3\10\6\0"+
    "\6\10\1\u014c\21\10\1\0\1\10\34\0\3\10\6\0"+
    "\11\10\1\u014d\16\10\1\0\1\10\34\0\3\10\6\0"+
    "\15\10\1\u014e\12\10\1\0\1\10\34\0\3\10\6\0"+
    "\21\10\1\u014f\6\10\1\0\1\10\34\0\3\10\6\0"+
    "\13\10\1\u0150\14\10\1\0\1\10\34\0\3\10\6\0"+
    "\1\u012f\27\10\1\0\1\10\34\0\3\10\6\0\1\u0151"+
    "\27\10\1\0\1\10\34\0\3\10\6\0\25\10\1\u0152"+
    "\2\10\1\0\1\10\34\0\3\10\6\0\5\10\1\u0153"+
    "\22\10\1\0\1\10\34\0\3\10\6\0\1\u0154\27\10"+
    "\1\0\1\10\34\0\3\10\6\0\14\10\1\u0155\13\10"+
    "\1\0\1\10\34\0\3\10\6\0\25\10\1\u0156\2\10"+
    "\1\0\1\10\34\0\3\10\6\0\6\10\1\u0157\21\10"+
    "\1\0\1\10\34\0\3\10\6\0\30\10\1\0\1\u0158"+
    "\34\0\3\10\6\0\13\10\1\u0159\14\10\1\0\1\10"+
    "\34\0\3\10\6\0\22\10\1\u015a\5\10\1\0\1\10"+
    "\34\0\3\10\6\0\12\10\1\u015b\15\10\1\0\1\10"+
    "\34\0\3\10\6\0\1\u015c\27\10\1\0\1\10\34\0"+
    "\3\10\6\0\3\10\1\u015d\24\10\1\0\1\10\34\0"+
    "\3\10\6\0\7\10\1\126\20\10\1\0\1\10\34\0"+
    "\3\10\6\0\12\10\1\u015e\15\10\1\0\1\10\34\0"+
    "\3\10\6\0\5\10\1\216\22\10\1\0\1\10\34\0"+
    "\3\10\6\0\11\10\1\u015f\16\10\1\0\1\10\34\0"+
    "\3\10\6\0\6\10\1\u0160\21\10\1\0\1\10\34\0"+
    "\3\10\6\0\1\u0161\27\10\1\0\1\10\34\0\3\10"+
    "\6\0\16\10\1\u0162\11\10\1\0\1\10\34\0\3\10"+
    "\6\0\15\10\1\u0163\12\10\1\0\1\10\34\0\3\10"+
    "\6\0\1\u0164\27\10\1\0\1\10\34\0\3\10\6\0"+
    "\1\u0165\27\10\1\0\1\10\34\0\3\10\6\0\17\10"+
    "\1\u0166\10\10\1\0\1\10\34\0\3\10\6\0\5\10"+
    "\1\u0167\22\10\1\0\1\10\34\0\3\10\6\0\16\10"+
    "\1\u0168\11\10\1\0\1\10\34\0\3\10\6\0\3\10"+
    "\1\u012f\24\10\1\0\1\10\34\0\3\10\6\0\13\10"+
    "\1\u012f\14\10\1\0\1\10\34\0\3\10\6\0\13\10"+
    "\1\u0169\14\10\1\0\1\10\34\0\3\10\6\0\25\10"+
    "\1\u016a\2\10\1\0\1\10\34\0\3\10\6\0\3\10"+
    "\1\u016b\24\10\1\0\1\10\34\0\3\10\6\0\14\10"+
    "\1\u016c\13\10\1\0\1\10\34\0\3\10\6\0\17\10"+
    "\1\u016d\10\10\1\0\1\10\34\0\3\10\6\0\14\10"+
    "\1\u016e\13\10\1\0\1\10\34\0\3\10\6\0\7\10"+
    "\1\u015c\20\10\1\0\1\10\34\0\3\10\6\0\21\10"+
    "\1\u016f\6\10\1\0\1\10\34\0\3\10\6\0\21\10"+
    "\1\u0170\6\10\1\0\1\10\34\0\3\10\6\0\1\u0171"+
    "\27\10\1\0\1\10\34\0\3\10\6\0\1\u0172\27\10"+
    "\1\0\1\10\34\0\3\10\6\0\13\10\1\u0133\14\10"+
    "\1\0\1\10\34\0\3\10\6\0\1\331\27\10\1\0"+
    "\1\10\34\0\3\10\6\0\1\u0173\27\10\1\0\1\10"+
    "\34\0\3\10\6\0\5\10\1\126\22\10\1\0\1\10"+
    "\34\0\3\10\6\0\25\10\1\u0174\2\10\1\0\1\10"+
    "\34\0\3\10\6\0\11\10\1\u0175\16\10\1\0\1\10"+
    "\34\0\3\10\6\0\11\10\1\u0176\16\10\1\0\1\10"+
    "\34\0\3\10\6\0\16\10\1\u0177\11\10\1\0\1\10"+
    "\34\0\3\10\6\0\1\u0166\27\10\1\0\1\10\34\0"+
    "\3\10\6\0\17\10\1\u012f\10\10\1\0\1\10\34\0"+
    "\3\10\6\0\2\10\1\u0178\25\10\1\0\1\10\34\0"+
    "\3\10\6\0\21\10\1\u0179\6\10\1\0\1\10\34\0"+
    "\3\10\6\0\14\10\1\u017a\13\10\1\0\1\10\34\0"+
    "\3\10\6\0\13\10\1\u017b\14\10\1\0\1\10\34\0"+
    "\3\10\6\0\1\u017c\5\10\1\u017d\21\10\1\0\1\10"+
    "\34\0\3\10\6\0\1\u0133\27\10\1\0\1\10\34\0"+
    "\3\10\6\0\16\10\1\u017e\11\10\1\0\1\10\34\0"+
    "\3\10\6\0\14\10\1\u0133\13\10\1\0\1\10\34\0"+
    "\3\10\6\0\13\10\1\u0106\14\10\1\0\1\10\34\0"+
    "\3\10\6\0\16\10\1\u017f\11\10\1\0\1\10\34\0"+
    "\3\10\6\0\3\10\1\334\24\10\1\0\1\10\34\0"+
    "\3\10\6\0\20\10\1\115\7\10\1\0\1\10\34\0"+
    "\3\10\6\0\6\10\1\u0180\21\10\1\0\1\10\34\0"+
    "\3\10\6\0\16\10\1\u0181\11\10\1\0\1\10\34\0"+
    "\3\10\6\0\16\10\1\u0182\11\10\1\0\1\10\34\0"+
    "\3\10\6\0\1\u0183\27\10\1\0\1\10\34\0\3\10"+
    "\6\0\13\10\1\u0184\14\10\1\0\1\10\34\0\3\10"+
    "\6\0\26\10\1\u0185\1\10\1\0\1\10\34\0\3\10"+
    "\6\0\11\10\1\u0133\16\10\1\0\1\10\34\0\3\10"+
    "\6\0\11\10\1\u0160\16\10\1\0\1\10\34\0\3\10"+
    "\6\0\5\10\1\u012d\22\10\1\0\1\10\34\0\3\10"+
    "\6\0\11\10\1\u012f\16\10\1\0\1\10\34\0\3\10"+
    "\6\0\14\10\1\u0186\13\10\1\0\1\10\34\0\3\10"+
    "\6\0\3\10\1\u0187\24\10\1\0\1\10\34\0\3\10"+
    "\6\0\2\10\1\u0188\25\10\1\0\1\10\34\0\3\10"+
    "\6\0\25\10\1\u0189\2\10\1\0\1\10\34\0\3\10"+
    "\6\0\1\10\1\u018a\26\10\1\0\1\10\34\0\3\10"+
    "\6\0\16\10\1\u018b\11\10\1\0\1\10\34\0\3\10"+
    "\6\0\2\10\1\u018c\25\10\1\0\1\10\34\0\3\10"+
    "\6\0\13\10\1\u018d\14\10\1\0\1\10\34\0\3\10"+
    "\6\0\11\10\1\u018e\16\10\1\0\1\10\34\0\3\10"+
    "\6\0\16\10\1\u018f\11\10\1\0\1\10\34\0\3\10"+
    "\6\0\24\10\1\u0133\3\10\1\0\1\10\34\0\3\10"+
    "\6\0\13\10\1\u0190\14\10\1\0\1\10\34\0\3\10"+
    "\6\0\13\10\1\u0191\14\10\1\0\1\10\34\0\3\10"+
    "\6\0\1\u0192\27\10\1\0\1\10\34\0\3\10\6\0"+
    "\3\10\1\u0193\24\10\1\0\1\10\34\0\3\10\6\0"+
    "\25\10\1\u0194\2\10\1\0\1\10\34\0\3\10\6\0"+
    "\25\10\1\u0195\2\10\1\0\1\10\34\0\3\10\6\0"+
    "\15\10\1\u0196\12\10\1\0\1\10\34\0\3\10\6\0"+
    "\17\10\1\u0197\10\10\1\0\1\10\34\0\3\10\6\0"+
    "\1\u0198\27\10\1\0\1\10\34\0\3\10\6\0\6\10"+
    "\1\u0199\21\10\1\0\1\10\34\0\3\10\6\0\6\10"+
    "\1\u019a\21\10\1\0\1\10\34\0\3\10\6\0\3\10"+
    "\1\u019b\24\10\1\0\1\10\34\0\3\10\6\0\17\10"+
    "\1\u015a\10\10\1\0\1\10\34\0\3\10\6\0\6\10"+
    "\1\u0133\21\10\1\0\1\10\34\0\3\10";

  private static int [] zzUnpackTrans() {
    int [] result = new int[22743];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\34\1\1\11\2\1\1\11\5\1\2\11"+
    "\1\1\4\11\1\1\1\11\2\1\3\11\4\1\1\11"+
    "\65\1\2\0\1\1\2\0\2\11\1\0\1\11\3\0"+
    "\1\11\1\0\1\11\3\1\1\11\1\0\1\1\1\0"+
    "\76\1\7\0\1\11\1\1\1\0\70\1\3\0\1\1"+
    "\1\11\1\0\60\1\1\11\136\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[411];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
//Variables globales para ser accedidas después
public String lexeme;
public int linea;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 188) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 48: 
          { {lexeme=yytext(); return SELEC;}
          }
        case 56: break;
        case 9: 
          { lexeme=yytext(); return PAF;
          }
        case 57: break;
        case 5: 
          { lexeme=yytext(); return ID;
          }
        case 58: break;
        case 7: 
          { lexeme=yytext(); return PAI;
          }
        case 59: break;
        case 25: 
          { lexeme=yytext(); return INT;
          }
        case 60: break;
        case 33: 
          { lexeme=yytext(); return COMPARACION;
          }
        case 61: break;
        case 31: 
          { lexeme=yytext(); return DIFERENTE;
          }
        case 62: break;
        case 29: 
          { lexeme=yytext(); linea = yyline; return ERROR;
          }
        case 63: break;
        case 51: 
          { {lexeme=yytext(); return INCLUI;}
          }
        case 64: break;
        case 55: 
          { lexeme=yytext(); return ACCDB;
          }
        case 65: break;
        case 54: 
          { {lexeme=yytext(); return FUN;}
          }
        case 66: break;
        case 37: 
          { {lexeme=yytext(); return ELS;}
          }
        case 67: break;
        case 21: 
          { lexeme=yytext(); return SIGNIN;
          }
        case 68: break;
        case 26: 
          { lexeme=yytext(); return PALABRARESERVADA;
          }
        case 69: break;
        case 34: 
          { {lexeme=yytext(); return REAL;}
          }
        case 70: break;
        case 24: 
          { lexeme=yytext(); return PUNTOYCOMA;
          }
        case 71: break;
        case 40: 
          { lexeme=yytext(); return CONSTANTE;
          }
        case 72: break;
        case 23: 
          { lexeme=yytext(); return DOSPUNTOS;
          }
        case 73: break;
        case 28: 
          { lexeme=yytext(); return SI;
          }
        case 74: break;
        case 45: 
          { lexeme=yytext(); return ARGBD;
          }
        case 75: break;
        case 4: 
          { lexeme=yytext(); return COMMENT;
          }
        case 76: break;
        case 38: 
          { lexeme=yytext(); return TIPODEDATOL;
          }
        case 77: break;
        case 1: 
          { lexeme=yytext();linea = yyline; return ERROR;
          }
        case 78: break;
        case 20: 
          { lexeme=yytext(); return ETF;
          }
        case 79: break;
        case 41: 
          { {lexeme=yytext(); return BREA;}
          }
        case 80: break;
        case 19: 
          { lexeme=yytext(); return ETI;
          }
        case 81: break;
        case 16: 
          { lexeme=yytext(); return LLAVEA;
          }
        case 82: break;
        case 11: 
          { lexeme=yytext(); return PUNTO;
          }
        case 83: break;
        case 27: 
          { {lexeme=yytext(); return HMIENTR;}
          }
        case 84: break;
        case 52: 
          { lexeme=yytext(); return CONSTP;
          }
        case 85: break;
        case 36: 
          { lexeme=yytext(); return ENT;
          }
        case 86: break;
        case 18: 
          { lexeme=yytext(); return SLASH;
          }
        case 87: break;
        case 43: 
          { {lexeme=yytext(); return MIENTR;}
          }
        case 88: break;
        case 32: 
          { lexeme=yytext(); return FINPHP;
          }
        case 89: break;
        case 35: 
          { {lexeme=yytext(); return PARA;}
          }
        case 90: break;
        case 49: 
          { {lexeme=yytext(); return RET;}
          }
        case 91: break;
        case 53: 
          { {lexeme=yytext(); return CONTIN;}
          }
        case 92: break;
        case 50: 
          { {lexeme=yytext(); return PARAC;}
          }
        case 93: break;
        case 2: 
          { lexeme=yytext(); return ESPACIO;
          }
        case 94: break;
        case 14: 
          { lexeme=yytext(); return PAA;
          }
        case 95: break;
        case 8: 
          { lexeme=yytext(); return COMILLA;
          }
        case 96: break;
        case 17: 
          { lexeme=yytext(); return LLAVEC;
          }
        case 97: break;
        case 46: 
          { lexeme=yytext(); return INICIOPHP;
          }
        case 98: break;
        case 44: 
          { lexeme=yytext(); return VARPRE;
          }
        case 99: break;
        case 22: 
          { lexeme=yytext(); return ASIGNACION;
          }
        case 100: break;
        case 6: 
          { lexeme=yytext(); return ERROR;
          }
        case 101: break;
        case 47: 
          { lexeme=yytext(); return CADENA;
          }
        case 102: break;
        case 3: 
          { lexeme=yytext(); return OPERADORARITMETICO;
          }
        case 103: break;
        case 12: 
          { lexeme=yytext(); return COMA;
          }
        case 104: break;
        case 30: 
          { lexeme=yytext(); return TEXTO;
          }
        case 105: break;
        case 39: 
          { {lexeme=yytext(); return BOOL;}
          }
        case 106: break;
        case 13: 
          { lexeme=yytext(); return ARR;
          }
        case 107: break;
        case 15: 
          { lexeme=yytext(); return PAC;
          }
        case 108: break;
        case 10: 
          { lexeme=yytext(); return OPERADORLOGICO;
          }
        case 109: break;
        case 42: 
          { lexeme=yytext(); return REA;
          }
        case 110: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
